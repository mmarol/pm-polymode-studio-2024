{"version":3,"names":[],"mappings":"","sources":["build.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/*!\n * Glide.js v3.6.2\n * (c) 2013-2024 Jędrzej Chałubek (https://github.com/jedrzejchalubek/)\n * Released under the MIT License.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Glide = factory());\n})(this, (function () { 'use strict';\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n\n      if (enumerableOnly) {\n        symbols = symbols.filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n      }\n\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    } else if (call !== void 0) {\n      throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get() {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(arguments.length < 3 ? target : receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get.apply(this, arguments);\n  }\n\n  var defaults = {\n    /**\n     * Type of the movement.\n     *\n     * Available types:\n     * `slider` - Rewinds slider to the start/end when it reaches the first or last slide.\n     * `carousel` - Changes slides without starting over when it reaches the first or last slide.\n     *\n     * @type {String}\n     */\n    type: 'slider',\n\n    /**\n     * Start at specific slide number defined with zero-based index.\n     *\n     * @type {Number}\n     */\n    startAt: 0,\n\n    /**\n     * A number of slides visible on the single viewport.\n     *\n     * @type {Number}\n     */\n    perView: 1,\n\n    /**\n     * Focus currently active slide at a specified position in the track.\n     *\n     * Available inputs:\n     * `center` - Current slide will be always focused at the center of a track.\n     * `0,1,2,3...` - Current slide will be focused on the specified zero-based index.\n     *\n     * @type {String|Number}\n     */\n    focusAt: 0,\n\n    /**\n     * A size of the gap added between slides.\n     *\n     * @type {Number}\n     */\n    gap: 10,\n\n    /**\n     * Change slides after a specified interval. Use `false` for turning off autoplay.\n     *\n     * @type {Number|Boolean}\n     */\n    autoplay: false,\n\n    /**\n     * Stop autoplay on mouseover event.\n     *\n     * @type {Boolean}\n     */\n    hoverpause: true,\n\n    /**\n     * Allow for changing slides with left and right keyboard arrows.\n     *\n     * @type {Boolean}\n     */\n    keyboard: true,\n\n    /**\n     * Stop running `perView` number of slides from the end. Use this\n     * option if you don't want to have an empty space after\n     * a slider. Works only with `slider` type and a\n     * non-centered `focusAt` setting.\n     *\n     * @type {Boolean}\n     */\n    bound: false,\n\n    /**\n     * Minimal swipe distance needed to change the slide. Use `false` for turning off a swiping.\n     *\n     * @type {Number|Boolean}\n     */\n    swipeThreshold: 80,\n\n    /**\n     * Minimal mouse drag distance needed to change the slide. Use `false` for turning off a dragging.\n     *\n     * @type {Number|Boolean}\n     */\n    dragThreshold: 120,\n\n    /**\n     * A number of slides moved on single swipe.\n     *\n     * Available types:\n     * `` - Moves slider by one slide per swipe\n     * `|` - Moves slider between views per swipe (number of slides defined in `perView` options)\n     *\n     * @type {String}\n     */\n    perSwipe: '',\n\n    /**\n     * Moving distance ratio of the slides on a swiping and dragging.\n     *\n     * @type {Number}\n     */\n    touchRatio: 0.5,\n\n    /**\n     * Angle required to activate slides moving on swiping or dragging.\n     *\n     * @type {Number}\n     */\n    touchAngle: 45,\n\n    /**\n     * Duration of the animation in milliseconds.\n     *\n     * @type {Number}\n     */\n    animationDuration: 400,\n\n    /**\n     * Allows looping the `slider` type. Slider will rewind to the first/last slide when it's at the start/end.\n     *\n     * @type {Boolean}\n     */\n    rewind: true,\n\n    /**\n     * Duration of the rewinding animation of the `slider` type in milliseconds.\n     *\n     * @type {Number}\n     */\n    rewindDuration: 800,\n\n    /**\n     * Easing function for the animation.\n     *\n     * @type {String}\n     */\n    animationTimingFunc: 'cubic-bezier(.165, .840, .440, 1)',\n\n    /**\n     * Wait for the animation to finish until the next user input can be processed\n     *\n     * @type {boolean}\n     */\n    waitForTransition: true,\n\n    /**\n     * Throttle costly events at most once per every wait milliseconds.\n     *\n     * @type {Number}\n     */\n    throttle: 10,\n\n    /**\n     * Moving direction mode.\n     *\n     * Available inputs:\n     * - 'ltr' - left to right movement,\n     * - 'rtl' - right to left movement.\n     *\n     * @type {String}\n     */\n    direction: 'ltr',\n\n    /**\n     * The distance value of the next and previous viewports which\n     * have to peek in the current view. Accepts number and\n     * pixels as a string. Left and right peeking can be\n     * set up separately with a directions object.\n     *\n     * For example:\n     * `100` - Peek 100px on the both sides.\n     * { before: 100, after: 50 }` - Peek 100px on the left side and 50px on the right side.\n     *\n     * @type {Number|String|Object}\n     */\n    peek: 0,\n\n    /**\n     * Defines how many clones of current viewport will be generated.\n     *\n     * @type {Number}\n     */\n    cloningRatio: 1,\n\n    /**\n     * Collection of options applied at specified media breakpoints.\n     * For example: display two slides per view under 800px.\n     * `{\n     *   '800px': {\n     *     perView: 2\n     *   }\n     * }`\n     */\n    breakpoints: {},\n\n    /**\n     * Collection of internally used HTML classes.\n     *\n     * @todo Refactor `slider` and `carousel` properties to single `type: { slider: '', carousel: '' }` object\n     * @type {Object}\n     */\n    classes: {\n      swipeable: 'glide--swipeable',\n      dragging: 'glide--dragging',\n      direction: {\n        ltr: 'glide--ltr',\n        rtl: 'glide--rtl'\n      },\n      type: {\n        slider: 'glide--slider',\n        carousel: 'glide--carousel'\n      },\n      slide: {\n        clone: 'glide__slide--clone',\n        active: 'glide__slide--active'\n      },\n      arrow: {\n        disabled: 'glide__arrow--disabled'\n      },\n      nav: {\n        active: 'glide__bullet--active'\n      }\n    }\n  };\n\n  /**\n   * Outputs warning message to the bowser console.\n   *\n   * @param  {String} msg\n   * @return {Void}\n   */\n  function warn(msg) {\n    console.error(\"[Glide warn]: \".concat(msg));\n  }\n\n  /**\n   * Converts value entered as number\n   * or string to integer value.\n   *\n   * @param {String} value\n   * @returns {Number}\n   */\n  function toInt(value) {\n    return parseInt(value);\n  }\n  /**\n   * Converts value entered as number\n   * or string to flat value.\n   *\n   * @param {String} value\n   * @returns {Number}\n   */\n\n  function toFloat(value) {\n    return parseFloat(value);\n  }\n  /**\n   * Indicates whether the specified value is a string.\n   *\n   * @param  {*}   value\n   * @return {Boolean}\n   */\n\n  function isString(value) {\n    return typeof value === 'string';\n  }\n  /**\n   * Indicates whether the specified value is an object.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   *\n   * @see https://github.com/jashkenas/underscore\n   */\n\n  function isObject(value) {\n    var type = _typeof(value);\n\n    return type === 'function' || type === 'object' && !!value; // eslint-disable-line no-mixed-operators\n  }\n  /**\n   * Indicates whether the specified value is a function.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n  /**\n   * Indicates whether the specified value is undefined.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n  /**\n   * Indicates whether the specified value is an array.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n\n  function isArray(value) {\n    return value.constructor === Array;\n  }\n\n  /**\n   * Creates and initializes specified collection of extensions.\n   * Each extension receives access to instance of glide and rest of components.\n   *\n   * @param {Object} glide\n   * @param {Object} extensions\n   *\n   * @returns {Object}\n   */\n\n  function mount(glide, extensions, events) {\n    var components = {};\n\n    for (var name in extensions) {\n      if (isFunction(extensions[name])) {\n        components[name] = extensions[name](glide, components, events);\n      } else {\n        warn('Extension must be a function');\n      }\n    }\n\n    for (var _name in components) {\n      if (isFunction(components[_name].mount)) {\n        components[_name].mount();\n      }\n    }\n\n    return components;\n  }\n\n  /**\n   * Defines getter and setter property on the specified object.\n   *\n   * @param  {Object} obj         Object where property has to be defined.\n   * @param  {String} prop        Name of the defined property.\n   * @param  {Object} definition  Get and set definitions for the property.\n   * @return {Void}\n   */\n  function define(obj, prop, definition) {\n    Object.defineProperty(obj, prop, definition);\n  }\n  /**\n   * Sorts aphabetically object keys.\n   *\n   * @param  {Object} obj\n   * @return {Object}\n   */\n\n  function sortKeys(obj) {\n    return Object.keys(obj).sort().reduce(function (r, k) {\n      r[k] = obj[k];\n      return r[k], r;\n    }, {});\n  }\n  /**\n   * Merges passed settings object with default options.\n   *\n   * @param  {Object} defaults\n   * @param  {Object} settings\n   * @return {Object}\n   */\n\n  function mergeOptions(defaults, settings) {\n    var options = Object.assign({}, defaults, settings); // `Object.assign` do not deeply merge objects, so we\n    // have to do it manually for every nested object\n    // in options. Although it does not look smart,\n    // it's smaller and faster than some fancy\n    // merging deep-merge algorithm script.\n\n    if (settings.hasOwnProperty('classes')) {\n      options.classes = Object.assign({}, defaults.classes, settings.classes);\n      var properties = ['direction', 'type', 'slide', 'arrow', 'nav'];\n      properties.forEach(function (property) {\n        if (settings.classes.hasOwnProperty(property)) {\n          options.classes[property] = _objectSpread2(_objectSpread2({}, defaults.classes[property]), settings.classes[property]);\n        }\n      });\n    }\n\n    if (settings.hasOwnProperty('breakpoints')) {\n      options.breakpoints = Object.assign({}, defaults.breakpoints, settings.breakpoints);\n    }\n\n    return options;\n  }\n\n  var EventsBus = /*#__PURE__*/function () {\n    /**\n     * Construct a EventBus instance.\n     *\n     * @param {Object} events\n     */\n    function EventsBus() {\n      var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, EventsBus);\n\n      this.events = events;\n      this.hop = events.hasOwnProperty;\n    }\n    /**\n     * Adds listener to the specifed event.\n     *\n     * @param {String|Array} event\n     * @param {Function} handler\n     */\n\n\n    _createClass(EventsBus, [{\n      key: \"on\",\n      value: function on(event, handler) {\n        if (isArray(event)) {\n          for (var i = 0; i < event.length; i++) {\n            this.on(event[i], handler);\n          }\n\n          return;\n        } // Create the event's object if not yet created\n\n\n        if (!this.hop.call(this.events, event)) {\n          this.events[event] = [];\n        } // Add the handler to queue\n\n\n        var index = this.events[event].push(handler) - 1; // Provide handle back for removal of event\n\n        return {\n          remove: function remove() {\n            delete this.events[event][index];\n          }\n        };\n      }\n      /**\n       * Runs registered handlers for specified event.\n       *\n       * @param {String|Array} event\n       * @param {Object=} context\n       */\n\n    }, {\n      key: \"emit\",\n      value: function emit(event, context) {\n        if (isArray(event)) {\n          for (var i = 0; i < event.length; i++) {\n            this.emit(event[i], context);\n          }\n\n          return;\n        } // If the event doesn't exist, or there's no handlers in queue, just leave\n\n\n        if (!this.hop.call(this.events, event)) {\n          return;\n        } // Cycle through events queue, fire!\n\n\n        this.events[event].forEach(function (item) {\n          item(context || {});\n        });\n      }\n    }]);\n\n    return EventsBus;\n  }();\n\n  var Glide$1 = /*#__PURE__*/function () {\n    /**\r\n     * Construct glide.\r\n     *\r\n     * @param  {String} selector\r\n     * @param  {Object} options\r\n     */\n    function Glide(selector) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Glide);\n\n      this._c = {};\n      this._t = [];\n      this._e = new EventsBus();\n      this.disabled = false;\n      this.selector = selector;\n      this.settings = mergeOptions(defaults, options);\n      this.index = this.settings.startAt;\n    }\n    /**\r\n     * Initializes glide.\r\n     *\r\n     * @param {Object} extensions Collection of extensions to initialize.\r\n     * @return {Glide}\r\n     */\n\n\n    _createClass(Glide, [{\n      key: \"mount\",\n      value: function mount$1() {\n        var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        this._e.emit('mount.before');\n\n        if (isObject(extensions)) {\n          this._c = mount(this, extensions, this._e);\n        } else {\n          warn('You need to provide a object on `mount()`');\n        }\n\n        this._e.emit('mount.after');\n\n        return this;\n      }\n      /**\r\n       * Collects an instance `translate` transformers.\r\n       *\r\n       * @param  {Array} transformers Collection of transformers.\r\n       * @return {Void}\r\n       */\n\n    }, {\n      key: \"mutate\",\n      value: function mutate() {\n        var transformers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        if (isArray(transformers)) {\n          this._t = transformers;\n        } else {\n          warn('You need to provide a array on `mutate()`');\n        }\n\n        return this;\n      }\n      /**\r\n       * Updates glide with specified settings.\r\n       *\r\n       * @param {Object} settings\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"update\",\n      value: function update() {\n        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        this.settings = mergeOptions(this.settings, settings);\n\n        if (settings.hasOwnProperty('startAt')) {\n          this.index = settings.startAt;\n        }\n\n        this._e.emit('update');\n\n        return this;\n      }\n      /**\r\n       * Change slide with specified pattern. A pattern must be in the special format:\r\n       * `>` - Move one forward\r\n       * `<` - Move one backward\r\n       * `={i}` - Go to {i} zero-based slide (eq. '=1', will go to second slide)\r\n       * `>>` - Rewinds to end (last slide)\r\n       * `<<` - Rewinds to start (first slide)\r\n       * `|>` - Move one viewport forward\r\n       * `|<` - Move one viewport backward\r\n       *\r\n       * @param {String} pattern\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"go\",\n      value: function go(pattern) {\n        this._c.Run.make(pattern);\n\n        return this;\n      }\n      /**\r\n       * Move track by specified distance.\r\n       *\r\n       * @param {String} distance\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"move\",\n      value: function move(distance) {\n        this._c.Transition.disable();\n\n        this._c.Move.make(distance);\n\n        return this;\n      }\n      /**\r\n       * Destroy instance and revert all changes done by this._c.\r\n       *\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this._e.emit('destroy');\n\n        return this;\n      }\n      /**\r\n       * Start instance autoplaying.\r\n       *\r\n       * @param {Boolean|Number} interval Run autoplaying with passed interval regardless of `autoplay` settings\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"play\",\n      value: function play() {\n        var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (interval) {\n          this.settings.autoplay = interval;\n        }\n\n        this._e.emit('play');\n\n        return this;\n      }\n      /**\r\n       * Stop instance autoplaying.\r\n       *\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"pause\",\n      value: function pause() {\n        this._e.emit('pause');\n\n        return this;\n      }\n      /**\r\n       * Sets glide into a idle status.\r\n       *\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"disable\",\n      value: function disable() {\n        this.disabled = true;\n        return this;\n      }\n      /**\r\n       * Sets glide into a active status.\r\n       *\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"enable\",\n      value: function enable() {\n        this.disabled = false;\n        return this;\n      }\n      /**\r\n       * Adds cuutom event listener with handler.\r\n       *\r\n       * @param  {String|Array} event\r\n       * @param  {Function} handler\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: \"on\",\n      value: function on(event, handler) {\n        this._e.on(event, handler);\n\n        return this;\n      }\n      /**\r\n       * Checks if glide is a precised type.\r\n       *\r\n       * @param  {String} name\r\n       * @return {Boolean}\r\n       */\n\n    }, {\n      key: \"isType\",\n      value: function isType(name) {\n        return this.settings.type === name;\n      }\n      /**\r\n       * Gets value of the core options.\r\n       *\r\n       * @return {Object}\r\n       */\n\n    }, {\n      key: \"settings\",\n      get: function get() {\n        return this._o;\n      }\n      /**\r\n       * Sets value of the core options.\r\n       *\r\n       * @param  {Object} o\r\n       * @return {Void}\r\n       */\n      ,\n      set: function set(o) {\n        if (isObject(o)) {\n          this._o = o;\n        } else {\n          warn('Options must be an `object` instance.');\n        }\n      }\n      /**\r\n       * Gets current index of the slider.\r\n       *\r\n       * @return {Object}\r\n       */\n\n    }, {\n      key: \"index\",\n      get: function get() {\n        return this._i;\n      }\n      /**\r\n       * Sets current index a slider.\r\n       *\r\n       * @return {Object}\r\n       */\n      ,\n      set: function set(i) {\n        this._i = toInt(i);\n      }\n      /**\r\n       * Gets type name of the slider.\r\n       *\r\n       * @return {String}\r\n       */\n\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this.settings.type;\n      }\n      /**\r\n       * Gets value of the idle status.\r\n       *\r\n       * @return {Boolean}\r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._d;\n      }\n      /**\r\n       * Sets value of the idle status.\r\n       *\r\n       * @return {Boolean}\r\n       */\n      ,\n      set: function set(status) {\n        this._d = !!status;\n      }\n    }]);\n\n    return Glide;\n  }();\n\n  function Run (Glide, Components, Events) {\n    var Run = {\n      /**\n       * Initializes autorunning of the glide.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this._o = false;\n      },\n\n      /**\n       * Makes glides running based on the passed moving schema.\n       *\n       * @param {String} move\n       */\n      make: function make(move) {\n        var _this = this;\n\n        if (!Glide.disabled) {\n          !Glide.settings.waitForTransition || Glide.disable();\n          this.move = move;\n          Events.emit('run.before', this.move);\n          this.calculate();\n          Events.emit('run', this.move);\n          Components.Transition.after(function () {\n            if (_this.isStart()) {\n              Events.emit('run.start', _this.move);\n            }\n\n            if (_this.isEnd()) {\n              Events.emit('run.end', _this.move);\n            }\n\n            if (_this.isOffset()) {\n              _this._o = false;\n              Events.emit('run.offset', _this.move);\n            }\n\n            Events.emit('run.after', _this.move);\n            Glide.enable();\n          });\n        }\n      },\n\n      /**\n       * Calculates current index based on defined move.\n       *\n       * @return {Number|Undefined}\n       */\n      calculate: function calculate() {\n        var move = this.move,\n            length = this.length;\n        var steps = move.steps,\n            direction = move.direction; // By default assume that size of view is equal to one slide\n\n        var viewSize = 1; // While direction is `=` we want jump to\n        // a specified index described in steps.\n\n        if (direction === '=') {\n          // Check if bound is true, \n          // as we want to avoid whitespaces.\n          if (Glide.settings.bound && toInt(steps) > length) {\n            Glide.index = length;\n            return;\n          }\n\n          Glide.index = steps;\n          return;\n        } // When pattern is equal to `>>` we want\n        // fast forward to the last slide.\n\n\n        if (direction === '>' && steps === '>') {\n          Glide.index = length;\n          return;\n        } // When pattern is equal to `<<` we want\n        // fast forward to the first slide.\n\n\n        if (direction === '<' && steps === '<') {\n          Glide.index = 0;\n          return;\n        } // pagination movement\n\n\n        if (direction === '|') {\n          viewSize = Glide.settings.perView || 1;\n        } // we are moving forward\n\n\n        if (direction === '>' || direction === '|' && steps === '>') {\n          var index = calculateForwardIndex(viewSize);\n\n          if (index > length) {\n            this._o = true;\n          }\n\n          Glide.index = normalizeForwardIndex(index, viewSize);\n          return;\n        } // we are moving backward\n\n\n        if (direction === '<' || direction === '|' && steps === '<') {\n          var _index = calculateBackwardIndex(viewSize);\n\n          if (_index < 0) {\n            this._o = true;\n          }\n\n          Glide.index = normalizeBackwardIndex(_index, viewSize);\n          return;\n        }\n\n        warn(\"Invalid direction pattern [\".concat(direction).concat(steps, \"] has been used\"));\n      },\n\n      /**\n       * Checks if we are on the first slide.\n       *\n       * @return {Boolean}\n       */\n      isStart: function isStart() {\n        return Glide.index <= 0;\n      },\n\n      /**\n       * Checks if we are on the last slide.\n       *\n       * @return {Boolean}\n       */\n      isEnd: function isEnd() {\n        return Glide.index >= this.length;\n      },\n\n      /**\n       * Checks if we are making a offset run.\n       *\n       * @param {String} direction\n       * @return {Boolean}\n       */\n      isOffset: function isOffset() {\n        var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!direction) {\n          return this._o;\n        }\n\n        if (!this._o) {\n          return false;\n        } // did we view to the right?\n\n\n        if (direction === '|>') {\n          return this.move.direction === '|' && this.move.steps === '>';\n        } // did we view to the left?\n\n\n        if (direction === '|<') {\n          return this.move.direction === '|' && this.move.steps === '<';\n        }\n\n        return this.move.direction === direction;\n      },\n\n      /**\n       * Checks if bound mode is active\n       *\n       * @return {Boolean}\n       */\n      isBound: function isBound() {\n        return Glide.isType('slider') && Glide.settings.focusAt !== 'center' && Glide.settings.bound;\n      }\n    };\n    /**\n     * Returns index value to move forward/to the right\n     *\n     * @param viewSize\n     * @returns {Number}\n     */\n\n    function calculateForwardIndex(viewSize) {\n      var index = Glide.index;\n\n      if (Glide.isType('carousel')) {\n        return index + viewSize;\n      }\n\n      return index + (viewSize - index % viewSize);\n    }\n    /**\n     * Normalizes the given forward index based on glide settings, preventing it to exceed certain boundaries\n     *\n     * @param index\n     * @param length\n     * @param viewSize\n     * @returns {Number}\n     */\n\n\n    function normalizeForwardIndex(index, viewSize) {\n      var length = Run.length;\n\n      if (index <= length) {\n        return index;\n      }\n\n      if (Glide.isType('carousel')) {\n        return index - (length + 1);\n      }\n\n      if (Glide.settings.rewind) {\n        // bound does funny things with the length, therefor we have to be certain\n        // that we are on the last possible index value given by bound\n        if (Run.isBound() && !Run.isEnd()) {\n          return length;\n        }\n\n        return 0;\n      }\n\n      if (Run.isBound()) {\n        return length;\n      }\n\n      return Math.floor(length / viewSize) * viewSize;\n    }\n    /**\n     * Calculates index value to move backward/to the left\n     *\n     * @param viewSize\n     * @returns {Number}\n     */\n\n\n    function calculateBackwardIndex(viewSize) {\n      var index = Glide.index;\n\n      if (Glide.isType('carousel')) {\n        return index - viewSize;\n      } // ensure our back navigation results in the same index as a forward navigation\n      // to experience a homogeneous paging\n\n\n      var view = Math.ceil(index / viewSize);\n      return (view - 1) * viewSize;\n    }\n    /**\n     * Normalizes the given backward index based on glide settings, preventing it to exceed certain boundaries\n     *\n     * @param index\n     * @param length\n     * @param viewSize\n     * @returns {*}\n     */\n\n\n    function normalizeBackwardIndex(index, viewSize) {\n      var length = Run.length;\n\n      if (index >= 0) {\n        return index;\n      }\n\n      if (Glide.isType('carousel')) {\n        return index + (length + 1);\n      }\n\n      if (Glide.settings.rewind) {\n        // bound does funny things with the length, therefor we have to be certain\n        // that we are on first possible index value before we to rewind to the length given by bound\n        if (Run.isBound() && Run.isStart()) {\n          return length;\n        }\n\n        return Math.floor(length / viewSize) * viewSize;\n      }\n\n      return 0;\n    }\n\n    define(Run, 'move', {\n      /**\n       * Gets value of the move schema.\n       *\n       * @returns {Object}\n       */\n      get: function get() {\n        return this._m;\n      },\n\n      /**\n       * Sets value of the move schema.\n       *\n       * @returns {Object}\n       */\n      set: function set(value) {\n        var step = value.substr(1);\n        this._m = {\n          direction: value.substr(0, 1),\n          steps: step ? toInt(step) ? toInt(step) : step : 0\n        };\n      }\n    });\n    define(Run, 'length', {\n      /**\n       * Gets value of the running distance based\n       * on zero-indexing number of slides.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var settings = Glide.settings;\n        var length = Components.Html.slides.length; // If the `bound` option is active, a maximum running distance should be\n        // reduced by `perView` and `focusAt` settings. Running distance\n        // should end before creating an empty space after instance.\n\n        if (this.isBound()) {\n          return length - 1 - (toInt(settings.perView) - 1) + toInt(settings.focusAt);\n        }\n\n        return length - 1;\n      }\n    });\n    define(Run, 'offset', {\n      /**\n       * Gets status of the offsetting flag.\n       *\n       * @return {Boolean}\n       */\n      get: function get() {\n        return this._o;\n      }\n    });\n    return Run;\n  }\n\n  /**\n   * Returns a current time.\n   *\n   * @return {Number}\n   */\n  function now() {\n    return new Date().getTime();\n  }\n\n  /**\n   * Returns a function, that, when invoked, will only be triggered\n   * at most once during a given window of time.\n   *\n   * @param {Function} func\n   * @param {Number} wait\n   * @param {Object=} options\n   * @return {Function}\n   *\n   * @see https://github.com/jashkenas/underscore\n   */\n\n  function throttle(func, wait) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var timeout, context, args, result;\n    var previous = 0;\n\n    var later = function later() {\n      previous = options.leading === false ? 0 : now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function throttled() {\n      var at = now();\n      if (!previous && options.leading === false) previous = at;\n      var remaining = wait - (at - previous);\n      context = this;\n      args = arguments;\n\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n\n        previous = at;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n\n      return result;\n    };\n\n    throttled.cancel = function () {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  }\n\n  var MARGIN_TYPE = {\n    ltr: ['marginLeft', 'marginRight'],\n    rtl: ['marginRight', 'marginLeft']\n  };\n  function Gaps (Glide, Components, Events) {\n    var Gaps = {\n      /**\n       * Applies gaps between slides. First and last\n       * slides do not receive it's edge margins.\n       *\n       * @param {HTMLCollection} slides\n       * @return {Void}\n       */\n      apply: function apply(slides) {\n        for (var i = 0, len = slides.length; i < len; i++) {\n          var style = slides[i].style;\n          var direction = Components.Direction.value;\n\n          if (i !== 0) {\n            style[MARGIN_TYPE[direction][0]] = \"\".concat(this.value / 2, \"px\");\n          } else {\n            style[MARGIN_TYPE[direction][0]] = '';\n          }\n\n          if (i !== slides.length - 1) {\n            style[MARGIN_TYPE[direction][1]] = \"\".concat(this.value / 2, \"px\");\n          } else {\n            style[MARGIN_TYPE[direction][1]] = '';\n          }\n        }\n      },\n\n      /**\n       * Removes gaps from the slides.\n       *\n       * @param {HTMLCollection} slides\n       * @returns {Void}\n      */\n      remove: function remove(slides) {\n        for (var i = 0, len = slides.length; i < len; i++) {\n          var style = slides[i].style;\n          style.marginLeft = '';\n          style.marginRight = '';\n        }\n      }\n    };\n    define(Gaps, 'value', {\n      /**\n       * Gets value of the gap.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return toInt(Glide.settings.gap);\n      }\n    });\n    define(Gaps, 'grow', {\n      /**\n       * Gets additional dimensions value caused by gaps.\n       * Used to increase width of the slides wrapper.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return Gaps.value * Components.Sizes.length;\n      }\n    });\n    define(Gaps, 'reductor', {\n      /**\n       * Gets reduction value caused by gaps.\n       * Used to subtract width of the slides.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        var perView = Glide.settings.perView;\n        return Gaps.value * (perView - 1) / perView;\n      }\n    });\n    /**\n     * Apply calculated gaps:\n     * - after building, so slides (including clones) will receive proper margins\n     * - on updating via API, to recalculate gaps with new options\n     */\n\n    Events.on(['build.after', 'update'], throttle(function () {\n      Gaps.apply(Components.Html.wrapper.children);\n    }, 30));\n    /**\n     * Remove gaps:\n     * - on destroying to bring markup to its inital state\n     */\n\n    Events.on('destroy', function () {\n      Gaps.remove(Components.Html.wrapper.children);\n    });\n    return Gaps;\n  }\n\n  /**\n   * Finds siblings nodes of the passed node.\n   *\n   * @param  {Element} node\n   * @return {Array}\n   */\n  function siblings(node) {\n    if (node && node.parentNode) {\n      var n = node.parentNode.firstChild;\n      var matched = [];\n\n      for (; n; n = n.nextSibling) {\n        if (n.nodeType === 1 && n !== node) {\n          matched.push(n);\n        }\n      }\n\n      return matched;\n    }\n\n    return [];\n  }\n  /**\n   * Coerces a NodeList to an Array.\n   *\n   * @param  {NodeList} nodeList\n   * @return {Array}\n   */\n\n  function toArray(nodeList) {\n    return Array.prototype.slice.call(nodeList);\n  }\n\n  var TRACK_SELECTOR = '[data-glide-el=\"track\"]';\n  function Html (Glide, Components, Events) {\n    var Html = {\n      /**\n       * Setup slider HTML nodes.\n       *\n       * @param {Glide} glide\n       */\n      mount: function mount() {\n        this.root = Glide.selector;\n        this.track = this.root.querySelector(TRACK_SELECTOR);\n        this.collectSlides();\n      },\n\n      /**\n       * Collect slides\n       */\n      collectSlides: function collectSlides() {\n        this.slides = toArray(this.wrapper.children).filter(function (slide) {\n          return !slide.classList.contains(Glide.settings.classes.slide.clone);\n        });\n      }\n    };\n    define(Html, 'root', {\n      /**\n       * Gets node of the glide main element.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html._r;\n      },\n\n      /**\n       * Sets node of the glide main element.\n       *\n       * @return {Object}\n       */\n      set: function set(r) {\n        if (isString(r)) {\n          r = document.querySelector(r);\n        }\n\n        if (r !== null) {\n          Html._r = r;\n        } else {\n          warn('Root element must be a existing Html node');\n        }\n      }\n    });\n    define(Html, 'track', {\n      /**\n       * Gets node of the glide track with slides.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html._t;\n      },\n\n      /**\n       * Sets node of the glide track with slides.\n       *\n       * @return {Object}\n       */\n      set: function set(t) {\n        Html._t = t;\n      }\n    });\n    define(Html, 'wrapper', {\n      /**\n       * Gets node of the slides wrapper.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html.track.children[0];\n      }\n    });\n    /**\n     * Add/remove/reorder dynamic slides\n     */\n\n    Events.on('update', function () {\n      Html.collectSlides();\n    });\n    return Html;\n  }\n\n  function Peek (Glide, Components, Events) {\n    var Peek = {\n      /**\n       * Setups how much to peek based on settings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.value = Glide.settings.peek;\n      }\n    };\n    define(Peek, 'value', {\n      /**\n       * Gets value of the peek.\n       *\n       * @returns {Number|Object}\n       */\n      get: function get() {\n        return Peek._v;\n      },\n\n      /**\n       * Sets value of the peek.\n       *\n       * @param {Number|Object} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        if (isObject(value)) {\n          value.before = toInt(value.before);\n          value.after = toInt(value.after);\n        } else {\n          value = toInt(value);\n        }\n\n        Peek._v = value;\n      }\n    });\n    define(Peek, 'reductor', {\n      /**\n       * Gets reduction value caused by peek.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        var value = Peek.value;\n        var perView = Glide.settings.perView;\n\n        if (isObject(value)) {\n          return value.before / perView + value.after / perView;\n        }\n\n        return value * 2 / perView;\n      }\n    });\n    /**\n     * Recalculate peeking sizes on:\n     * - when resizing window to update to proper percents\n     */\n\n    Events.on(['resize', 'update'], function () {\n      Peek.mount();\n    });\n    return Peek;\n  }\n\n  function Move (Glide, Components, Events) {\n    var Move = {\n      /**\n       * Constructs move component.\n       *\n       * @returns {Void}\n       */\n      mount: function mount() {\n        this._o = 0;\n      },\n\n      /**\n       * Calculates a movement value based on passed offset and currently active index.\n       *\n       * @param  {Number} offset\n       * @return {Void}\n       */\n      make: function make() {\n        var _this = this;\n\n        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        this.offset = offset;\n        Events.emit('move', {\n          movement: this.value\n        });\n        Components.Transition.after(function () {\n          Events.emit('move.after', {\n            movement: _this.value\n          });\n        });\n      }\n    };\n    define(Move, 'offset', {\n      /**\n       * Gets an offset value used to modify current translate.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Move._o;\n      },\n\n      /**\n       * Sets an offset value used to modify current translate.\n       *\n       * @return {Object}\n       */\n      set: function set(value) {\n        Move._o = !isUndefined(value) ? toInt(value) : 0;\n      }\n    });\n    define(Move, 'translate', {\n      /**\n       * Gets a raw movement value.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Sizes.slideWidth * Glide.index;\n      }\n    });\n    define(Move, 'value', {\n      /**\n       * Gets an actual movement value corrected by offset.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var offset = this.offset;\n        var translate = this.translate;\n\n        if (Components.Direction.is('rtl')) {\n          return translate + offset;\n        }\n\n        return translate - offset;\n      }\n    });\n    /**\n     * Make movement to proper slide on:\n     * - before build, so glide will start at `startAt` index\n     * - on each standard run to move to newly calculated index\n     */\n\n    Events.on(['build.before', 'run'], function () {\n      Move.make();\n    });\n    return Move;\n  }\n\n  function Sizes (Glide, Components, Events) {\n    var Sizes = {\n      /**\n       * Setups dimensions of slides.\n       *\n       * @return {Void}\n       */\n      setupSlides: function setupSlides() {\n        var width = \"\".concat(this.slideWidth, \"px\");\n        var slides = Components.Html.slides;\n\n        for (var i = 0; i < slides.length; i++) {\n          slides[i].style.width = width;\n        }\n      },\n\n      /**\n       * Setups dimensions of slides wrapper.\n       *\n       * @return {Void}\n       */\n      setupWrapper: function setupWrapper() {\n        Components.Html.wrapper.style.width = \"\".concat(this.wrapperSize, \"px\");\n      },\n\n      /**\n       * Removes applied styles from HTML elements.\n       *\n       * @returns {Void}\n       */\n      remove: function remove() {\n        var slides = Components.Html.slides;\n\n        for (var i = 0; i < slides.length; i++) {\n          slides[i].style.width = '';\n        }\n\n        Components.Html.wrapper.style.width = '';\n      }\n    };\n    define(Sizes, 'length', {\n      /**\n       * Gets count number of the slides.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Html.slides.length;\n      }\n    });\n    define(Sizes, 'width', {\n      /**\n       * Gets width value of the slider (visible area).\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Html.track.offsetWidth;\n      }\n    });\n    define(Sizes, 'wrapperSize', {\n      /**\n       * Gets size of the slides wrapper.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Sizes.slideWidth * Sizes.length + Components.Gaps.grow + Components.Clones.grow;\n      }\n    });\n    define(Sizes, 'slideWidth', {\n      /**\n       * Gets width value of a single slide.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Sizes.width / Glide.settings.perView - Components.Peek.reductor - Components.Gaps.reductor;\n      }\n    });\n    /**\n     * Apply calculated glide's dimensions:\n     * - before building, so other dimensions (e.g. translate) will be calculated propertly\n     * - when resizing window to recalculate sildes dimensions\n     * - on updating via API, to calculate dimensions based on new options\n     */\n\n    Events.on(['build.before', 'resize', 'update'], function () {\n      Sizes.setupSlides();\n      Sizes.setupWrapper();\n    });\n    /**\n     * Remove calculated glide's dimensions:\n     * - on destoting to bring markup to its inital state\n     */\n\n    Events.on('destroy', function () {\n      Sizes.remove();\n    });\n    return Sizes;\n  }\n\n  function Build (Glide, Components, Events) {\n    var Build = {\n      /**\n       * Init glide building. Adds classes, sets\n       * dimensions and setups initial state.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        Events.emit('build.before');\n        this.typeClass();\n        this.activeClass();\n        Events.emit('build.after');\n      },\n\n      /**\n       * Adds `type` class to the glide element.\n       *\n       * @return {Void}\n       */\n      typeClass: function typeClass() {\n        Components.Html.root.classList.add(Glide.settings.classes.type[Glide.settings.type]);\n      },\n\n      /**\n       * Sets active class to current slide.\n       *\n       * @return {Void}\n       */\n      activeClass: function activeClass() {\n        var classes = Glide.settings.classes;\n        var slide = Components.Html.slides[Glide.index];\n\n        if (slide) {\n          slide.classList.add(classes.slide.active);\n          siblings(slide).forEach(function (sibling) {\n            sibling.classList.remove(classes.slide.active);\n          });\n        }\n      },\n\n      /**\n       * Removes HTML classes applied at building.\n       *\n       * @return {Void}\n       */\n      removeClasses: function removeClasses() {\n        var _Glide$settings$class = Glide.settings.classes,\n            type = _Glide$settings$class.type,\n            slide = _Glide$settings$class.slide;\n        Components.Html.root.classList.remove(type[Glide.settings.type]);\n        Components.Html.slides.forEach(function (sibling) {\n          sibling.classList.remove(slide.active);\n        });\n      }\n    };\n    /**\n     * Clear building classes:\n     * - on destroying to bring HTML to its initial state\n     * - on updating to remove classes before remounting component\n     */\n\n    Events.on(['destroy', 'update'], function () {\n      Build.removeClasses();\n    });\n    /**\n     * Remount component:\n     * - on resizing of the window to calculate new dimensions\n     * - on updating settings via API\n     */\n\n    Events.on(['resize', 'update'], function () {\n      Build.mount();\n    });\n    /**\n     * Swap active class of current slide:\n     * - after each move to the new index\n     */\n\n    Events.on('move.after', function () {\n      Build.activeClass();\n    });\n    return Build;\n  }\n\n  function Clones (Glide, Components, Events) {\n    var Clones = {\n      /**\n       * Create pattern map and collect slides to be cloned.\n       */\n      mount: function mount() {\n        this.items = [];\n\n        if (Glide.isType('carousel')) {\n          this.items = this.collect();\n        }\n      },\n\n      /**\n       * Collect clones with pattern.\n       *\n       * @return {[]}\n       */\n      collect: function collect() {\n        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var slides = Components.Html.slides;\n        var _Glide$settings = Glide.settings,\n            perView = _Glide$settings.perView,\n            classes = _Glide$settings.classes,\n            cloningRatio = _Glide$settings.cloningRatio;\n\n        if (slides.length > 0) {\n          var peekIncrementer = +!!Glide.settings.peek;\n          var cloneCount = perView + peekIncrementer + Math.round(perView / 2);\n          var append = slides.slice(0, cloneCount).reverse();\n          var prepend = slides.slice(cloneCount * -1);\n\n          for (var r = 0; r < Math.max(cloningRatio, Math.floor(perView / slides.length)); r++) {\n            for (var i = 0; i < append.length; i++) {\n              var clone = append[i].cloneNode(true);\n              clone.classList.add(classes.slide.clone);\n              items.push(clone);\n            }\n\n            for (var _i = 0; _i < prepend.length; _i++) {\n              var _clone = prepend[_i].cloneNode(true);\n\n              _clone.classList.add(classes.slide.clone);\n\n              items.unshift(_clone);\n            }\n          }\n        }\n\n        return items;\n      },\n\n      /**\n       * Append cloned slides with generated pattern.\n       *\n       * @return {Void}\n       */\n      append: function append() {\n        var items = this.items;\n        var _Components$Html = Components.Html,\n            wrapper = _Components$Html.wrapper,\n            slides = _Components$Html.slides;\n        var half = Math.floor(items.length / 2);\n        var prepend = items.slice(0, half).reverse();\n        var append = items.slice(half * -1).reverse();\n        var width = \"\".concat(Components.Sizes.slideWidth, \"px\");\n\n        for (var i = 0; i < append.length; i++) {\n          wrapper.appendChild(append[i]);\n        }\n\n        for (var _i2 = 0; _i2 < prepend.length; _i2++) {\n          wrapper.insertBefore(prepend[_i2], slides[0]);\n        }\n\n        for (var _i3 = 0; _i3 < items.length; _i3++) {\n          items[_i3].style.width = width;\n        }\n      },\n\n      /**\n       * Remove all cloned slides.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        var items = this.items;\n\n        for (var i = 0; i < items.length; i++) {\n          Components.Html.wrapper.removeChild(items[i]);\n        }\n      }\n    };\n    define(Clones, 'grow', {\n      /**\n       * Gets additional dimensions value caused by clones.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return (Components.Sizes.slideWidth + Components.Gaps.value) * Clones.items.length;\n      }\n    });\n    /**\n     * Append additional slide's clones:\n     * - while glide's type is `carousel`\n     */\n\n    Events.on('update', function () {\n      Clones.remove();\n      Clones.mount();\n      Clones.append();\n    });\n    /**\n     * Append additional slide's clones:\n     * - while glide's type is `carousel`\n     */\n\n    Events.on('build.before', function () {\n      if (Glide.isType('carousel')) {\n        Clones.append();\n      }\n    });\n    /**\n     * Remove clones HTMLElements:\n     * - on destroying, to bring HTML to its initial state\n     */\n\n    Events.on('destroy', function () {\n      Clones.remove();\n    });\n    return Clones;\n  }\n\n  var EventsBinder = /*#__PURE__*/function () {\n    /**\n     * Construct a EventsBinder instance.\n     */\n    function EventsBinder() {\n      var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, EventsBinder);\n\n      this.listeners = listeners;\n    }\n    /**\n     * Adds events listeners to arrows HTML elements.\n     *\n     * @param  {String|Array} events\n     * @param  {Element|Window|Document} el\n     * @param  {Function} closure\n     * @param  {Boolean|Object} capture\n     * @return {Void}\n     */\n\n\n    _createClass(EventsBinder, [{\n      key: \"on\",\n      value: function on(events, el, closure) {\n        var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        if (isString(events)) {\n          events = [events];\n        }\n\n        for (var i = 0; i < events.length; i++) {\n          this.listeners[events[i]] = closure;\n          el.addEventListener(events[i], this.listeners[events[i]], capture);\n        }\n      }\n      /**\n       * Removes event listeners from arrows HTML elements.\n       *\n       * @param  {String|Array} events\n       * @param  {Element|Window|Document} el\n       * @param  {Boolean|Object} capture\n       * @return {Void}\n       */\n\n    }, {\n      key: \"off\",\n      value: function off(events, el) {\n        var capture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (isString(events)) {\n          events = [events];\n        }\n\n        for (var i = 0; i < events.length; i++) {\n          el.removeEventListener(events[i], this.listeners[events[i]], capture);\n        }\n      }\n      /**\n       * Destroy collected listeners.\n       *\n       * @returns {Void}\n       */\n\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        delete this.listeners;\n      }\n    }]);\n\n    return EventsBinder;\n  }();\n\n  function Resize (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var Resize = {\n      /**\n       * Initializes window bindings.\n       */\n      mount: function mount() {\n        this.bind();\n      },\n\n      /**\n       * Binds `rezsize` listener to the window.\n       * It's a costly event, so we are debouncing it.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('resize', window, throttle(function () {\n          Events.emit('resize');\n        }, Glide.settings.throttle));\n      },\n\n      /**\n       * Unbinds listeners from the window.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('resize', window);\n      }\n    };\n    /**\n     * Remove bindings from window:\n     * - on destroying, to remove added EventListener\n     */\n\n    Events.on('destroy', function () {\n      Resize.unbind();\n      Binder.destroy();\n    });\n    return Resize;\n  }\n\n  var VALID_DIRECTIONS = ['ltr', 'rtl'];\n  var FLIPED_MOVEMENTS = {\n    '>': '<',\n    '<': '>',\n    '=': '='\n  };\n  function Direction (Glide, Components, Events) {\n    var Direction = {\n      /**\n       * Setups gap value based on settings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.value = Glide.settings.direction;\n      },\n\n      /**\n       * Resolves pattern based on direction value\n       *\n       * @param {String} pattern\n       * @returns {String}\n       */\n      resolve: function resolve(pattern) {\n        var token = pattern.slice(0, 1);\n\n        if (this.is('rtl')) {\n          return pattern.split(token).join(FLIPED_MOVEMENTS[token]);\n        }\n\n        return pattern;\n      },\n\n      /**\n       * Checks value of direction mode.\n       *\n       * @param {String} direction\n       * @returns {Boolean}\n       */\n      is: function is(direction) {\n        return this.value === direction;\n      },\n\n      /**\n       * Applies direction class to the root HTML element.\n       *\n       * @return {Void}\n       */\n      addClass: function addClass() {\n        Components.Html.root.classList.add(Glide.settings.classes.direction[this.value]);\n      },\n\n      /**\n       * Removes direction class from the root HTML element.\n       *\n       * @return {Void}\n       */\n      removeClass: function removeClass() {\n        Components.Html.root.classList.remove(Glide.settings.classes.direction[this.value]);\n      }\n    };\n    define(Direction, 'value', {\n      /**\n       * Gets value of the direction.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return Direction._v;\n      },\n\n      /**\n       * Sets value of the direction.\n       *\n       * @param {String} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        if (VALID_DIRECTIONS.indexOf(value) > -1) {\n          Direction._v = value;\n        } else {\n          warn('Direction value must be `ltr` or `rtl`');\n        }\n      }\n    });\n    /**\n     * Clear direction class:\n     * - on destroy to bring HTML to its initial state\n     * - on update to remove class before reappling bellow\n     */\n\n    Events.on(['destroy', 'update'], function () {\n      Direction.removeClass();\n    });\n    /**\n     * Remount component:\n     * - on update to reflect changes in direction value\n     */\n\n    Events.on('update', function () {\n      Direction.mount();\n    });\n    /**\n     * Apply direction class:\n     * - before building to apply class for the first time\n     * - on updating to reapply direction class that may changed\n     */\n\n    Events.on(['build.before', 'update'], function () {\n      Direction.addClass();\n    });\n    return Direction;\n  }\n\n  /**\n   * Reflects value of glide movement.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Rtl (Glide, Components) {\n    return {\n      /**\n       * Negates the passed translate if glide is in RTL option.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        if (Components.Direction.is('rtl')) {\n          return -translate;\n        }\n\n        return translate;\n      }\n    };\n  }\n\n  /**\n   * Updates glide movement with a `gap` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Gap (Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with number in the `gap` settings.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        var multiplier = Math.floor(translate / Components.Sizes.slideWidth);\n        return translate + Components.Gaps.value * multiplier;\n      }\n    };\n  }\n\n  /**\n   * Updates glide movement with width of additional clones width.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Grow (Glide, Components) {\n    return {\n      /**\n       * Adds to the passed translate width of the half of clones.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        return translate + Components.Clones.grow / 2;\n      }\n    };\n  }\n\n  /**\n   * Updates glide movement with a `peek` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n\n  function Peeking (Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with a `peek` setting.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        if (Glide.settings.focusAt >= 0) {\n          var peek = Components.Peek.value;\n\n          if (isObject(peek)) {\n            return translate - peek.before;\n          }\n\n          return translate - peek;\n        }\n\n        return translate;\n      }\n    };\n  }\n\n  /**\n   * Updates glide movement with a `focusAt` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Focusing (Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with index in the `focusAt` setting.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        var gap = Components.Gaps.value;\n        var width = Components.Sizes.width;\n        var focusAt = Glide.settings.focusAt;\n        var slideWidth = Components.Sizes.slideWidth;\n\n        if (focusAt === 'center') {\n          return translate - (width / 2 - slideWidth / 2);\n        }\n\n        return translate - slideWidth * focusAt - gap * focusAt;\n      }\n    };\n  }\n\n  /**\n   * Applies diffrent transformers on translate value.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n\n  function mutator (Glide, Components, Events) {\n    /**\n     * Merge instance transformers with collection of default transformers.\n     * It's important that the Rtl component be last on the list,\n     * so it reflects all previous transformations.\n     *\n     * @type {Array}\n     */\n    var TRANSFORMERS = [Gap, Grow, Peeking, Focusing].concat(Glide._t, [Rtl]);\n    return {\n      /**\n       * Piplines translate value with registered transformers.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      mutate: function mutate(translate) {\n        for (var i = 0; i < TRANSFORMERS.length; i++) {\n          var transformer = TRANSFORMERS[i];\n\n          if (isFunction(transformer) && isFunction(transformer().modify)) {\n            translate = transformer(Glide, Components, Events).modify(translate);\n          } else {\n            warn('Transformer should be a function that returns an object with `modify()` method');\n          }\n        }\n\n        return translate;\n      }\n    };\n  }\n\n  function Translate (Glide, Components, Events) {\n    var Translate = {\n      /**\n       * Sets value of translate on HTML element.\n       *\n       * @param {Number} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        var transform = mutator(Glide, Components).mutate(value);\n        var translate3d = \"translate3d(\".concat(-1 * transform, \"px, 0px, 0px)\");\n        Components.Html.wrapper.style.mozTransform = translate3d; // needed for supported Firefox 10-15\n\n        Components.Html.wrapper.style.webkitTransform = translate3d; // needed for supported Chrome 10-35, Safari 5.1-8, and Opera 15-22\n\n        Components.Html.wrapper.style.transform = translate3d;\n      },\n\n      /**\n       * Removes value of translate from HTML element.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        Components.Html.wrapper.style.transform = '';\n      },\n\n      /**\n       * @return {number}\n       */\n      getStartIndex: function getStartIndex() {\n        var length = Components.Sizes.length;\n        var index = Glide.index;\n        var perView = Glide.settings.perView;\n\n        if (Components.Run.isOffset('>') || Components.Run.isOffset('|>')) {\n          return length + (index - perView);\n        } // \"modulo length\" converts an index that equals length to zero\n\n\n        return (index + perView) % length;\n      },\n\n      /**\n       * @return {number}\n       */\n      getTravelDistance: function getTravelDistance() {\n        var travelDistance = Components.Sizes.slideWidth * Glide.settings.perView;\n\n        if (Components.Run.isOffset('>') || Components.Run.isOffset('|>')) {\n          // reverse travel distance so that we don't have to change subtract operations\n          return travelDistance * -1;\n        }\n\n        return travelDistance;\n      }\n    };\n    /**\n     * Set new translate value:\n     * - on move to reflect index change\n     * - on updating via API to reflect possible changes in options\n     */\n\n    Events.on('move', function (context) {\n      if (!Glide.isType('carousel') || !Components.Run.isOffset()) {\n        return Translate.set(context.movement);\n      }\n\n      Components.Transition.after(function () {\n        Events.emit('translate.jump');\n        Translate.set(Components.Sizes.slideWidth * Glide.index);\n      });\n      var startWidth = Components.Sizes.slideWidth * Components.Translate.getStartIndex();\n      return Translate.set(startWidth - Components.Translate.getTravelDistance());\n    });\n    /**\n     * Remove translate:\n     * - on destroying to bring markup to its inital state\n     */\n\n    Events.on('destroy', function () {\n      Translate.remove();\n    });\n    return Translate;\n  }\n\n  function Transition (Glide, Components, Events) {\n    /**\n     * Holds inactivity status of transition.\n     * When true transition is not applied.\n     *\n     * @type {Boolean}\n     */\n    var disabled = false;\n    var Transition = {\n      /**\n       * Composes string of the CSS transition.\n       *\n       * @param {String} property\n       * @return {String}\n       */\n      compose: function compose(property) {\n        var settings = Glide.settings;\n\n        if (disabled) {\n          return \"\".concat(property, \" 0ms \").concat(settings.animationTimingFunc);\n        }\n\n        return \"\".concat(property, \" \").concat(this.duration, \"ms \").concat(settings.animationTimingFunc);\n      },\n\n      /**\n       * Sets value of transition on HTML element.\n       *\n       * @param {String=} property\n       * @return {Void}\n       */\n      set: function set() {\n        var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n        Components.Html.wrapper.style.transition = this.compose(property);\n      },\n\n      /**\n       * Removes value of transition from HTML element.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        Components.Html.wrapper.style.transition = '';\n      },\n\n      /**\n       * Runs callback after animation.\n       *\n       * @param  {Function} callback\n       * @return {Void}\n       */\n      after: function after(callback) {\n        setTimeout(function () {\n          callback();\n        }, this.duration);\n      },\n\n      /**\n       * Enable transition.\n       *\n       * @return {Void}\n       */\n      enable: function enable() {\n        disabled = false;\n        this.set();\n      },\n\n      /**\n       * Disable transition.\n       *\n       * @return {Void}\n       */\n      disable: function disable() {\n        disabled = true;\n        this.set();\n      }\n    };\n    define(Transition, 'duration', {\n      /**\n       * Gets duration of the transition based\n       * on currently running animation type.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var settings = Glide.settings;\n\n        if (Glide.isType('slider') && Components.Run.offset) {\n          return settings.rewindDuration;\n        }\n\n        return settings.animationDuration;\n      }\n    });\n    /**\n     * Set transition `style` value:\n     * - on each moving, because it may be cleared by offset move\n     */\n\n    Events.on('move', function () {\n      Transition.set();\n    });\n    /**\n     * Disable transition:\n     * - before initial build to avoid transitioning from `0` to `startAt` index\n     * - while resizing window and recalculating dimensions\n     * - on jumping from offset transition at start and end edges in `carousel` type\n     */\n\n    Events.on(['build.before', 'resize', 'translate.jump'], function () {\n      Transition.disable();\n    });\n    /**\n     * Enable transition:\n     * - on each running, because it may be disabled by offset move\n     */\n\n    Events.on('run', function () {\n      Transition.enable();\n    });\n    /**\n     * Remove transition:\n     * - on destroying to bring markup to its inital state\n     */\n\n    Events.on('destroy', function () {\n      Transition.remove();\n    });\n    return Transition;\n  }\n\n  /**\n   * Test via a getter in the options object to see\n   * if the passive property is accessed.\n   *\n   * @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n   */\n  var supportsPassive = false;\n\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        supportsPassive = true;\n      }\n    });\n    window.addEventListener('testPassive', null, opts);\n    window.removeEventListener('testPassive', null, opts);\n  } catch (e) {}\n\n  var supportsPassive$1 = supportsPassive;\n\n  var START_EVENTS = ['touchstart', 'mousedown'];\n  var MOVE_EVENTS = ['touchmove', 'mousemove'];\n  var END_EVENTS = ['touchend', 'touchcancel', 'mouseup', 'mouseleave'];\n  var MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];\n  function Swipe (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var swipeSin = 0;\n    var swipeStartX = 0;\n    var swipeStartY = 0;\n    var disabled = false;\n    var capture = supportsPassive$1 ? {\n      passive: true\n    } : false;\n    var Swipe = {\n      /**\n       * Initializes swipe bindings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.bindSwipeStart();\n      },\n\n      /**\n       * Handler for `swipestart` event. Calculates entry points of the user's tap.\n       *\n       * @param {Object} event\n       * @return {Void}\n       */\n      start: function start(event) {\n        if (!disabled && !Glide.disabled) {\n          this.disable();\n          var swipe = this.touches(event);\n          swipeSin = null;\n          swipeStartX = toInt(swipe.pageX);\n          swipeStartY = toInt(swipe.pageY);\n          this.bindSwipeMove();\n          this.bindSwipeEnd();\n          Events.emit('swipe.start');\n        }\n      },\n\n      /**\n       * Handler for `swipemove` event. Calculates user's tap angle and distance.\n       *\n       * @param {Object} event\n       */\n      move: function move(event) {\n        if (!Glide.disabled) {\n          var _Glide$settings = Glide.settings,\n              touchAngle = _Glide$settings.touchAngle,\n              touchRatio = _Glide$settings.touchRatio,\n              classes = _Glide$settings.classes;\n          var swipe = this.touches(event);\n          var subExSx = toInt(swipe.pageX) - swipeStartX;\n          var subEySy = toInt(swipe.pageY) - swipeStartY;\n          var powEX = Math.abs(subExSx << 2);\n          var powEY = Math.abs(subEySy << 2);\n          var swipeHypotenuse = Math.sqrt(powEX + powEY);\n          var swipeCathetus = Math.sqrt(powEY);\n          swipeSin = Math.asin(swipeCathetus / swipeHypotenuse);\n\n          if (swipeSin * 180 / Math.PI < touchAngle) {\n            event.stopPropagation();\n            Components.Move.make(subExSx * toFloat(touchRatio));\n            Components.Html.root.classList.add(classes.dragging);\n            Events.emit('swipe.move');\n          } else {\n            return false;\n          }\n        }\n      },\n\n      /**\n       * Handler for `swipeend` event. Finitializes user's tap and decides about glide move.\n       *\n       * @param {Object} event\n       * @return {Void}\n       */\n      end: function end(event) {\n        if (!Glide.disabled) {\n          var _Glide$settings2 = Glide.settings,\n              perSwipe = _Glide$settings2.perSwipe,\n              touchAngle = _Glide$settings2.touchAngle,\n              classes = _Glide$settings2.classes;\n          var swipe = this.touches(event);\n          var threshold = this.threshold(event);\n          var swipeDistance = swipe.pageX - swipeStartX;\n          var swipeDeg = swipeSin * 180 / Math.PI;\n          this.enable();\n\n          if (swipeDistance > threshold && swipeDeg < touchAngle) {\n            Components.Run.make(Components.Direction.resolve(\"\".concat(perSwipe, \"<\")));\n          } else if (swipeDistance < -threshold && swipeDeg < touchAngle) {\n            Components.Run.make(Components.Direction.resolve(\"\".concat(perSwipe, \">\")));\n          } else {\n            // While swipe don't reach distance apply previous transform.\n            Components.Move.make();\n          }\n\n          Components.Html.root.classList.remove(classes.dragging);\n          this.unbindSwipeMove();\n          this.unbindSwipeEnd();\n          Events.emit('swipe.end');\n        }\n      },\n\n      /**\n       * Binds swipe's starting event.\n       *\n       * @return {Void}\n       */\n      bindSwipeStart: function bindSwipeStart() {\n        var _this = this;\n\n        var _Glide$settings3 = Glide.settings,\n            swipeThreshold = _Glide$settings3.swipeThreshold,\n            dragThreshold = _Glide$settings3.dragThreshold;\n\n        if (swipeThreshold) {\n          Binder.on(START_EVENTS[0], Components.Html.wrapper, function (event) {\n            _this.start(event);\n          }, capture);\n        }\n\n        if (dragThreshold) {\n          Binder.on(START_EVENTS[1], Components.Html.wrapper, function (event) {\n            _this.start(event);\n          }, capture);\n        }\n      },\n\n      /**\n       * Unbinds swipe's starting event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeStart: function unbindSwipeStart() {\n        Binder.off(START_EVENTS[0], Components.Html.wrapper, capture);\n        Binder.off(START_EVENTS[1], Components.Html.wrapper, capture);\n      },\n\n      /**\n       * Binds swipe's moving event.\n       *\n       * @return {Void}\n       */\n      bindSwipeMove: function bindSwipeMove() {\n        var _this2 = this;\n\n        Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle(function (event) {\n          _this2.move(event);\n        }, Glide.settings.throttle), capture);\n      },\n\n      /**\n       * Unbinds swipe's moving event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeMove: function unbindSwipeMove() {\n        Binder.off(MOVE_EVENTS, Components.Html.wrapper, capture);\n      },\n\n      /**\n       * Binds swipe's ending event.\n       *\n       * @return {Void}\n       */\n      bindSwipeEnd: function bindSwipeEnd() {\n        var _this3 = this;\n\n        Binder.on(END_EVENTS, Components.Html.wrapper, function (event) {\n          _this3.end(event);\n        });\n      },\n\n      /**\n       * Unbinds swipe's ending event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeEnd: function unbindSwipeEnd() {\n        Binder.off(END_EVENTS, Components.Html.wrapper);\n      },\n\n      /**\n       * Normalizes event touches points accorting to different types.\n       *\n       * @param {Object} event\n       */\n      touches: function touches(event) {\n        if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n          return event;\n        }\n\n        return event.touches[0] || event.changedTouches[0];\n      },\n\n      /**\n       * Gets value of minimum swipe distance settings based on event type.\n       *\n       * @return {Number}\n       */\n      threshold: function threshold(event) {\n        var settings = Glide.settings;\n\n        if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n          return settings.dragThreshold;\n        }\n\n        return settings.swipeThreshold;\n      },\n\n      /**\n       * Enables swipe event.\n       *\n       * @return {self}\n       */\n      enable: function enable() {\n        disabled = false;\n        Components.Transition.enable();\n        return this;\n      },\n\n      /**\n       * Disables swipe event.\n       *\n       * @return {self}\n       */\n      disable: function disable() {\n        disabled = true;\n        Components.Transition.disable();\n        return this;\n      }\n    };\n    /**\n     * Add component class:\n     * - after initial building\n     */\n\n    Events.on('build.after', function () {\n      Components.Html.root.classList.add(Glide.settings.classes.swipeable);\n    });\n    /**\n     * Remove swiping bindings:\n     * - on destroying, to remove added EventListeners\n     */\n\n    Events.on('destroy', function () {\n      Swipe.unbindSwipeStart();\n      Swipe.unbindSwipeMove();\n      Swipe.unbindSwipeEnd();\n      Binder.destroy();\n    });\n    return Swipe;\n  }\n\n  function Images (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var Images = {\n      /**\n       * Binds listener to glide wrapper.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.bind();\n      },\n\n      /**\n       * Binds `dragstart` event on wrapper to prevent dragging images.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('dragstart', Components.Html.wrapper, this.dragstart);\n      },\n\n      /**\n       * Unbinds `dragstart` event on wrapper.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('dragstart', Components.Html.wrapper);\n      },\n\n      /**\n       * Event handler. Prevents dragging.\n       *\n       * @return {Void}\n       */\n      dragstart: function dragstart(event) {\n        event.preventDefault();\n      }\n    };\n    /**\n     * Remove bindings from images:\n     * - on destroying, to remove added EventListeners\n     */\n\n    Events.on('destroy', function () {\n      Images.unbind();\n      Binder.destroy();\n    });\n    return Images;\n  }\n\n  function Anchors (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    /**\n     * Holds detaching status of anchors.\n     * Prevents detaching of already detached anchors.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    var detached = false;\n    /**\n     * Holds preventing status of anchors.\n     * If `true` redirection after click will be disabled.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    var prevented = false;\n    var Anchors = {\n      /**\n       * Setups a initial state of anchors component.\n       *\n       * @returns {Void}\n       */\n      mount: function mount() {\n        /**\n         * Holds collection of anchors elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n        this._a = Components.Html.wrapper.querySelectorAll('a');\n        this.bind();\n      },\n\n      /**\n       * Binds events to anchors inside a track.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('click', Components.Html.wrapper, this.click);\n      },\n\n      /**\n       * Unbinds events attached to anchors inside a track.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('click', Components.Html.wrapper);\n      },\n\n      /**\n       * Handler for click event. Prevents clicks when glide is in `prevent` status.\n       *\n       * @param  {Object} event\n       * @return {Void}\n       */\n      click: function click(event) {\n        if (prevented) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      },\n\n      /**\n       * Detaches anchors click event inside glide.\n       *\n       * @return {self}\n       */\n      detach: function detach() {\n        prevented = true;\n\n        if (!detached) {\n          for (var i = 0; i < this.items.length; i++) {\n            this.items[i].draggable = false;\n          }\n\n          detached = true;\n        }\n\n        return this;\n      },\n\n      /**\n       * Attaches anchors click events inside glide.\n       *\n       * @return {self}\n       */\n      attach: function attach() {\n        prevented = false;\n\n        if (detached) {\n          for (var i = 0; i < this.items.length; i++) {\n            this.items[i].draggable = true;\n          }\n\n          detached = false;\n        }\n\n        return this;\n      }\n    };\n    define(Anchors, 'items', {\n      /**\n       * Gets collection of the arrows HTML elements.\n       *\n       * @return {HTMLElement[]}\n       */\n      get: function get() {\n        return Anchors._a;\n      }\n    });\n    /**\n     * Detach anchors inside slides:\n     * - on swiping, so they won't redirect to its `href` attributes\n     */\n\n    Events.on('swipe.move', function () {\n      Anchors.detach();\n    });\n    /**\n     * Attach anchors inside slides:\n     * - after swiping and transitions ends, so they can redirect after click again\n     */\n\n    Events.on('swipe.end', function () {\n      Components.Transition.after(function () {\n        Anchors.attach();\n      });\n    });\n    /**\n     * Unbind anchors inside slides:\n     * - on destroying, to bring anchors to its initial state\n     */\n\n    Events.on('destroy', function () {\n      Anchors.attach();\n      Anchors.unbind();\n      Binder.destroy();\n    });\n    return Anchors;\n  }\n\n  var NAV_SELECTOR = '[data-glide-el=\"controls[nav]\"]';\n  var CONTROLS_SELECTOR = '[data-glide-el^=\"controls\"]';\n  var PREVIOUS_CONTROLS_SELECTOR = \"\".concat(CONTROLS_SELECTOR, \" [data-glide-dir*=\\\"<\\\"]\");\n  var NEXT_CONTROLS_SELECTOR = \"\".concat(CONTROLS_SELECTOR, \" [data-glide-dir*=\\\">\\\"]\");\n  function Controls (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var capture = supportsPassive$1 ? {\n      passive: true\n    } : false;\n    var Controls = {\n      /**\n       * Inits arrows. Binds events listeners\n       * to the arrows HTML elements.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        /**\n         * Collection of navigation HTML elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n        this._n = Components.Html.root.querySelectorAll(NAV_SELECTOR);\n        /**\n         * Collection of controls HTML elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n\n        this._c = Components.Html.root.querySelectorAll(CONTROLS_SELECTOR);\n        /**\n         * Collection of arrow control HTML elements.\n         *\n         * @private\n         * @type {Object}\n         */\n\n        this._arrowControls = {\n          previous: Components.Html.root.querySelectorAll(PREVIOUS_CONTROLS_SELECTOR),\n          next: Components.Html.root.querySelectorAll(NEXT_CONTROLS_SELECTOR)\n        };\n        this.addBindings();\n      },\n\n      /**\n       * Sets active class to current slide.\n       *\n       * @return {Void}\n       */\n      setActive: function setActive() {\n        for (var i = 0; i < this._n.length; i++) {\n          this.addClass(this._n[i].children);\n        }\n      },\n\n      /**\n       * Removes active class to current slide.\n       *\n       * @return {Void}\n       */\n      removeActive: function removeActive() {\n        for (var i = 0; i < this._n.length; i++) {\n          this.removeClass(this._n[i].children);\n        }\n      },\n\n      /**\n       * Toggles active class on items inside navigation.\n       *\n       * @param  {HTMLElement} controls\n       * @return {Void}\n       */\n      addClass: function addClass(controls) {\n        var settings = Glide.settings;\n        var item = controls[Glide.index];\n\n        if (!item) {\n          return;\n        }\n\n        item.classList.add(settings.classes.nav.active);\n        siblings(item).forEach(function (sibling) {\n          sibling.classList.remove(settings.classes.nav.active);\n        });\n      },\n\n      /**\n       * Removes active class from active control.\n       *\n       * @param  {HTMLElement} controls\n       * @return {Void}\n       */\n      removeClass: function removeClass(controls) {\n        var item = controls[Glide.index];\n        item === null || item === void 0 ? void 0 : item.classList.remove(Glide.settings.classes.nav.active);\n      },\n\n      /**\n       * Calculates, removes or adds `Glide.settings.classes.disabledArrow` class on the control arrows\n       */\n      setArrowState: function setArrowState() {\n        if (Glide.settings.rewind) {\n          return;\n        }\n\n        var next = Controls._arrowControls.next;\n        var previous = Controls._arrowControls.previous;\n        this.resetArrowState(next, previous);\n\n        if (Glide.index === 0) {\n          this.disableArrow(previous);\n        }\n\n        if (Glide.index === Components.Run.length) {\n          this.disableArrow(next);\n        }\n      },\n\n      /**\n       * Removes `Glide.settings.classes.disabledArrow` from given NodeList elements\n       *\n       * @param {NodeList[]} lists\n       */\n      resetArrowState: function resetArrowState() {\n        var settings = Glide.settings;\n\n        for (var _len = arguments.length, lists = new Array(_len), _key = 0; _key < _len; _key++) {\n          lists[_key] = arguments[_key];\n        }\n\n        lists.forEach(function (list) {\n          toArray(list).forEach(function (element) {\n            element.classList.remove(settings.classes.arrow.disabled);\n          });\n        });\n      },\n\n      /**\n       * Adds `Glide.settings.classes.disabledArrow` to given NodeList elements\n       *\n       * @param {NodeList[]} lists\n       */\n      disableArrow: function disableArrow() {\n        var settings = Glide.settings;\n\n        for (var _len2 = arguments.length, lists = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          lists[_key2] = arguments[_key2];\n        }\n\n        lists.forEach(function (list) {\n          toArray(list).forEach(function (element) {\n            element.classList.add(settings.classes.arrow.disabled);\n          });\n        });\n      },\n\n      /**\n       * Adds handles to the each group of controls.\n       *\n       * @return {Void}\n       */\n      addBindings: function addBindings() {\n        for (var i = 0; i < this._c.length; i++) {\n          this.bind(this._c[i].children);\n        }\n      },\n\n      /**\n       * Removes handles from the each group of controls.\n       *\n       * @return {Void}\n       */\n      removeBindings: function removeBindings() {\n        for (var i = 0; i < this._c.length; i++) {\n          this.unbind(this._c[i].children);\n        }\n      },\n\n      /**\n       * Binds events to arrows HTML elements.\n       *\n       * @param {HTMLCollection} elements\n       * @return {Void}\n       */\n      bind: function bind(elements) {\n        for (var i = 0; i < elements.length; i++) {\n          Binder.on('click', elements[i], this.click);\n          Binder.on('touchstart', elements[i], this.click, capture);\n        }\n      },\n\n      /**\n       * Unbinds events binded to the arrows HTML elements.\n       *\n       * @param {HTMLCollection} elements\n       * @return {Void}\n       */\n      unbind: function unbind(elements) {\n        for (var i = 0; i < elements.length; i++) {\n          Binder.off(['click', 'touchstart'], elements[i]);\n        }\n      },\n\n      /**\n       * Handles `click` event on the arrows HTML elements.\n       * Moves slider in direction given via the\n       * `data-glide-dir` attribute.\n       *\n       * @param {Object} event\n       * @return {void}\n       */\n      click: function click(event) {\n        if (!supportsPassive$1 && event.type === 'touchstart') {\n          event.preventDefault();\n        }\n\n        var direction = event.currentTarget.getAttribute('data-glide-dir');\n        Components.Run.make(Components.Direction.resolve(direction));\n      }\n    };\n    define(Controls, 'items', {\n      /**\n       * Gets collection of the controls HTML elements.\n       *\n       * @return {HTMLElement[]}\n       */\n      get: function get() {\n        return Controls._c;\n      }\n    });\n    /**\n     * Swap active class of current navigation item:\n     * - after mounting to set it to initial index\n     * - after each move to the new index\n     */\n\n    Events.on(['mount.after', 'move.after'], function () {\n      Controls.setActive();\n    });\n    /**\n     * Add or remove disabled class of arrow elements\n     */\n\n    Events.on(['mount.after', 'run'], function () {\n      Controls.setArrowState();\n    });\n    /**\n     * Remove bindings and HTML Classes:\n     * - on destroying, to bring markup to its initial state\n     */\n\n    Events.on('destroy', function () {\n      Controls.removeBindings();\n      Controls.removeActive();\n      Binder.destroy();\n    });\n    return Controls;\n  }\n\n  function Keyboard (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var Keyboard = {\n      /**\n       * Binds keyboard events on component mount.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        if (Glide.settings.keyboard) {\n          this.bind();\n        }\n      },\n\n      /**\n       * Adds keyboard press events.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('keyup', document, this.press);\n      },\n\n      /**\n       * Removes keyboard press events.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('keyup', document);\n      },\n\n      /**\n       * Handles keyboard's arrows press and moving glide foward and backward.\n       *\n       * @param  {Object} event\n       * @return {Void}\n       */\n      press: function press(event) {\n        var perSwipe = Glide.settings.perSwipe;\n        var arrowSymbols = {\n          ArrowRight: '>',\n          ArrowLeft: '<'\n        };\n\n        if (['ArrowRight', 'ArrowLeft'].includes(event.code)) {\n          Components.Run.make(Components.Direction.resolve(\"\".concat(perSwipe).concat(arrowSymbols[event.code])));\n        }\n      }\n    };\n    /**\n     * Remove bindings from keyboard:\n     * - on destroying to remove added events\n     * - on updating to remove events before remounting\n     */\n\n    Events.on(['destroy', 'update'], function () {\n      Keyboard.unbind();\n    });\n    /**\n     * Remount component\n     * - on updating to reflect potential changes in settings\n     */\n\n    Events.on('update', function () {\n      Keyboard.mount();\n    });\n    /**\n     * Destroy binder:\n     * - on destroying to remove listeners\n     */\n\n    Events.on('destroy', function () {\n      Binder.destroy();\n    });\n    return Keyboard;\n  }\n\n  function Autoplay (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var Autoplay = {\n      /**\n       * Initializes autoplaying and events.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.enable();\n        this.start();\n\n        if (Glide.settings.hoverpause) {\n          this.bind();\n        }\n      },\n\n      /**\n       * Enables autoplaying\n       *\n       * @returns {Void}\n       */\n      enable: function enable() {\n        this._e = true;\n      },\n\n      /**\n       * Disables autoplaying.\n       *\n       * @returns {Void}\n       */\n      disable: function disable() {\n        this._e = false;\n      },\n\n      /**\n       * Starts autoplaying in configured interval.\n       *\n       * @param {Boolean|Number} force Run autoplaying with passed interval regardless of `autoplay` settings\n       * @return {Void}\n       */\n      start: function start() {\n        var _this = this;\n\n        if (!this._e) {\n          return;\n        }\n\n        this.enable();\n\n        if (Glide.settings.autoplay) {\n          if (isUndefined(this._i)) {\n            this._i = setInterval(function () {\n              _this.stop();\n\n              Components.Run.make('>');\n\n              _this.start();\n\n              Events.emit('autoplay');\n            }, this.time);\n          }\n        }\n      },\n\n      /**\n       * Stops autorunning of the glide.\n       *\n       * @return {Void}\n       */\n      stop: function stop() {\n        this._i = clearInterval(this._i);\n      },\n\n      /**\n       * Stops autoplaying while mouse is over glide's area.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        var _this2 = this;\n\n        Binder.on('mouseover', Components.Html.root, function () {\n          if (_this2._e) {\n            _this2.stop();\n          }\n        });\n        Binder.on('mouseout', Components.Html.root, function () {\n          if (_this2._e) {\n            _this2.start();\n          }\n        });\n      },\n\n      /**\n       * Unbind mouseover events.\n       *\n       * @returns {Void}\n       */\n      unbind: function unbind() {\n        Binder.off(['mouseover', 'mouseout'], Components.Html.root);\n      }\n    };\n    define(Autoplay, 'time', {\n      /**\n       * Gets time period value for the autoplay interval. Prioritizes\n       * times in `data-glide-autoplay` attrubutes over options.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var autoplay = Components.Html.slides[Glide.index].getAttribute('data-glide-autoplay');\n\n        if (autoplay) {\n          return toInt(autoplay);\n        }\n\n        return toInt(Glide.settings.autoplay);\n      }\n    });\n    /**\n     * Stop autoplaying and unbind events:\n     * - on destroying, to clear defined interval\n     * - on updating via API to reset interval that may changed\n     */\n\n    Events.on(['destroy', 'update'], function () {\n      Autoplay.unbind();\n    });\n    /**\n     * Stop autoplaying:\n     * - before each run, to restart autoplaying\n     * - on pausing via API\n     * - on destroying, to clear defined interval\n     * - while starting a swipe\n     * - on updating via API to reset interval that may changed\n     */\n\n    Events.on(['run.before', 'swipe.start', 'update'], function () {\n      Autoplay.stop();\n    });\n    Events.on(['pause', 'destroy'], function () {\n      Autoplay.disable();\n      Autoplay.stop();\n    });\n    /**\n     * Start autoplaying:\n     * - after each run, to restart autoplaying\n     * - on playing via API\n     * - while ending a swipe\n     */\n\n    Events.on(['run.after', 'swipe.end'], function () {\n      Autoplay.start();\n    });\n    /**\n     * Start autoplaying:\n     * - after each run, to restart autoplaying\n     * - on playing via API\n     * - while ending a swipe\n     */\n\n    Events.on(['play'], function () {\n      Autoplay.enable();\n      Autoplay.start();\n    });\n    /**\n     * Remount autoplaying:\n     * - on updating via API to reset interval that may changed\n     */\n\n    Events.on('update', function () {\n      Autoplay.mount();\n    });\n    /**\n     * Destroy a binder:\n     * - on destroying glide instance to clearup listeners\n     */\n\n    Events.on('destroy', function () {\n      Binder.destroy();\n    });\n    return Autoplay;\n  }\n\n  /**\n   * Sorts keys of breakpoint object so they will be ordered from lower to bigger.\n   *\n   * @param {Object} points\n   * @returns {Object}\n   */\n\n  function sortBreakpoints(points) {\n    if (isObject(points)) {\n      return sortKeys(points);\n    } else {\n      warn(\"Breakpoints option must be an object\");\n    }\n\n    return {};\n  }\n\n  function Breakpoints (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    /**\n     * Holds reference to settings.\n     *\n     * @type {Object}\n     */\n\n    var settings = Glide.settings;\n    /**\n     * Holds reference to breakpoints object in settings. Sorts breakpoints\n     * from smaller to larger. It is required in order to proper\n     * matching currently active breakpoint settings.\n     *\n     * @type {Object}\n     */\n\n    var points = sortBreakpoints(settings.breakpoints);\n    /**\n     * Cache initial settings before overwritting.\n     *\n     * @type {Object}\n     */\n\n    var defaults = Object.assign({}, settings);\n    var Breakpoints = {\n      /**\n       * Matches settings for currectly matching media breakpoint.\n       *\n       * @param {Object} points\n       * @returns {Object}\n       */\n      match: function match(points) {\n        if (typeof window.matchMedia !== 'undefined') {\n          for (var point in points) {\n            if (points.hasOwnProperty(point)) {\n              if (window.matchMedia(\"(max-width: \".concat(point, \"px)\")).matches) {\n                return points[point];\n              }\n            }\n          }\n        }\n\n        return defaults;\n      }\n    };\n    /**\n     * Overwrite instance settings with currently matching breakpoint settings.\n     * This happens right after component initialization.\n     */\n\n    Object.assign(settings, Breakpoints.match(points));\n    /**\n     * Update glide with settings of matched brekpoint:\n     * - window resize to update slider\n     */\n\n    Binder.on('resize', window, throttle(function () {\n      Glide.settings = mergeOptions(settings, Breakpoints.match(points));\n    }, Glide.settings.throttle));\n    /**\n     * Resort and update default settings:\n     * - on reinit via API, so breakpoint matching will be performed with options\n     */\n\n    Events.on('update', function () {\n      points = sortBreakpoints(points);\n      defaults = Object.assign({}, settings);\n    });\n    /**\n     * Unbind resize listener:\n     * - on destroying, to bring markup to its initial state\n     */\n\n    Events.on('destroy', function () {\n      Binder.off('resize', window);\n    });\n    return Breakpoints;\n  }\n\n  var COMPONENTS = {\n    // Required\n    Html: Html,\n    Translate: Translate,\n    Transition: Transition,\n    Direction: Direction,\n    Peek: Peek,\n    Sizes: Sizes,\n    Gaps: Gaps,\n    Move: Move,\n    Clones: Clones,\n    Resize: Resize,\n    Build: Build,\n    Run: Run,\n    // Optional\n    Swipe: Swipe,\n    Images: Images,\n    Anchors: Anchors,\n    Controls: Controls,\n    Keyboard: Keyboard,\n    Autoplay: Autoplay,\n    Breakpoints: Breakpoints\n  };\n\n  var Glide = /*#__PURE__*/function (_Core) {\n    _inherits(Glide, _Core);\n\n    var _super = _createSuper(Glide);\n\n    function Glide() {\n      _classCallCheck(this, Glide);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(Glide, [{\n      key: \"mount\",\n      value: function mount() {\n        var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _get(_getPrototypeOf(Glide.prototype), \"mount\", this).call(this, Object.assign({}, COMPONENTS, extensions));\n      }\n    }]);\n\n    return Glide;\n  }(Glide$1);\n\n  return Glide;\n\n}));\n\n},{}],2:[function(require,module,exports){\n/**\n * matchesSelector v2.0.2\n * matchesSelector( element, '.selector' )\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  /*global define: false, module: false */\n  'use strict';\n  // universal module definition\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.matchesSelector = factory();\n  }\n\n}( window, function factory() {\n  'use strict';\n\n  var matchesMethod = ( function() {\n    var ElemProto = window.Element.prototype;\n    // check for the standard method name first\n    if ( ElemProto.matches ) {\n      return 'matches';\n    }\n    // check un-prefixed\n    if ( ElemProto.matchesSelector ) {\n      return 'matchesSelector';\n    }\n    // check vendor prefixes\n    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];\n\n    for ( var i=0; i < prefixes.length; i++ ) {\n      var prefix = prefixes[i];\n      var method = prefix + 'MatchesSelector';\n      if ( ElemProto[ method ] ) {\n        return method;\n      }\n    }\n  })();\n\n  return function matchesSelector( elem, selector ) {\n    return elem[ matchesMethod ]( selector );\n  };\n\n}));\n\n},{}],3:[function(require,module,exports){\n/**\n * EvEmitter v2.1.1\n * Lil' event emitter\n * MIT License\n */\n\n( function( global, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n\n}( typeof window != 'undefined' ? window : this, function() {\n\nfunction EvEmitter() {}\n\nlet proto = EvEmitter.prototype;\n\nproto.on = function( eventName, listener ) {\n  if ( !eventName || !listener ) return this;\n\n  // set events hash\n  let events = this._events = this._events || {};\n  // set listeners array\n  let listeners = events[ eventName ] = events[ eventName ] || [];\n  // only add once\n  if ( !listeners.includes( listener ) ) {\n    listeners.push( listener );\n  }\n\n  return this;\n};\n\nproto.once = function( eventName, listener ) {\n  if ( !eventName || !listener ) return this;\n\n  // add event\n  this.on( eventName, listener );\n  // set once flag\n  // set onceEvents hash\n  let onceEvents = this._onceEvents = this._onceEvents || {};\n  // set onceListeners object\n  let onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};\n  // set flag\n  onceListeners[ listener ] = true;\n\n  return this;\n};\n\nproto.off = function( eventName, listener ) {\n  let listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) return this;\n\n  let index = listeners.indexOf( listener );\n  if ( index != -1 ) {\n    listeners.splice( index, 1 );\n  }\n\n  return this;\n};\n\nproto.emitEvent = function( eventName, args ) {\n  let listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) return this;\n\n  // copy over to avoid interference if .off() in listener\n  listeners = listeners.slice( 0 );\n  args = args || [];\n  // once stuff\n  let onceListeners = this._onceEvents && this._onceEvents[ eventName ];\n\n  for ( let listener of listeners ) {\n    let isOnce = onceListeners && onceListeners[ listener ];\n    if ( isOnce ) {\n      // remove listener\n      // remove before trigger to prevent recursion\n      this.off( eventName, listener );\n      // unset once flag\n      delete onceListeners[ listener ];\n    }\n    // trigger listener\n    listener.apply( this, args );\n  }\n\n  return this;\n};\n\nproto.allOff = function() {\n  delete this._events;\n  delete this._onceEvents;\n  return this;\n};\n\nreturn EvEmitter;\n\n} ) );\n\n},{}],4:[function(require,module,exports){\n/**\n * Fizzy UI utils v2.0.7\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      'desandro-matches-selector/matches-selector'\n    ], function( matchesSelector ) {\n      return factory( window, matchesSelector );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('desandro-matches-selector')\n    );\n  } else {\n    // browser global\n    window.fizzyUIUtils = factory(\n      window,\n      window.matchesSelector\n    );\n  }\n\n}( window, function factory( window, matchesSelector ) {\n\n'use strict';\n\nvar utils = {};\n\n// ----- extend ----- //\n\n// extends objects\nutils.extend = function( a, b ) {\n  for ( var prop in b ) {\n    a[ prop ] = b[ prop ];\n  }\n  return a;\n};\n\n// ----- modulo ----- //\n\nutils.modulo = function( num, div ) {\n  return ( ( num % div ) + div ) % div;\n};\n\n// ----- makeArray ----- //\n\nvar arraySlice = Array.prototype.slice;\n\n// turn element or nodeList into an array\nutils.makeArray = function( obj ) {\n  if ( Array.isArray( obj ) ) {\n    // use object if already an array\n    return obj;\n  }\n  // return empty array if undefined or null. #6\n  if ( obj === null || obj === undefined ) {\n    return [];\n  }\n\n  var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';\n  if ( isArrayLike ) {\n    // convert nodeList to array\n    return arraySlice.call( obj );\n  }\n\n  // array of single index\n  return [ obj ];\n};\n\n// ----- removeFrom ----- //\n\nutils.removeFrom = function( ary, obj ) {\n  var index = ary.indexOf( obj );\n  if ( index != -1 ) {\n    ary.splice( index, 1 );\n  }\n};\n\n// ----- getParent ----- //\n\nutils.getParent = function( elem, selector ) {\n  while ( elem.parentNode && elem != document.body ) {\n    elem = elem.parentNode;\n    if ( matchesSelector( elem, selector ) ) {\n      return elem;\n    }\n  }\n};\n\n// ----- getQueryElement ----- //\n\n// use element as selector string\nutils.getQueryElement = function( elem ) {\n  if ( typeof elem == 'string' ) {\n    return document.querySelector( elem );\n  }\n  return elem;\n};\n\n// ----- handleEvent ----- //\n\n// enable .ontype to trigger from .addEventListener( elem, 'type' )\nutils.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\n// ----- filterFindElements ----- //\n\nutils.filterFindElements = function( elems, selector ) {\n  // make array of elems\n  elems = utils.makeArray( elems );\n  var ffElems = [];\n\n  elems.forEach( function( elem ) {\n    // check that elem is an actual element\n    if ( !( elem instanceof HTMLElement ) ) {\n      return;\n    }\n    // add elem if no selector\n    if ( !selector ) {\n      ffElems.push( elem );\n      return;\n    }\n    // filter & find items if we have a selector\n    // filter\n    if ( matchesSelector( elem, selector ) ) {\n      ffElems.push( elem );\n    }\n    // find children\n    var childElems = elem.querySelectorAll( selector );\n    // concat childElems to filterFound array\n    for ( var i=0; i < childElems.length; i++ ) {\n      ffElems.push( childElems[i] );\n    }\n  });\n\n  return ffElems;\n};\n\n// ----- debounceMethod ----- //\n\nutils.debounceMethod = function( _class, methodName, threshold ) {\n  threshold = threshold || 100;\n  // original method\n  var method = _class.prototype[ methodName ];\n  var timeoutName = methodName + 'Timeout';\n\n  _class.prototype[ methodName ] = function() {\n    var timeout = this[ timeoutName ];\n    clearTimeout( timeout );\n\n    var args = arguments;\n    var _this = this;\n    this[ timeoutName ] = setTimeout( function() {\n      method.apply( _this, args );\n      delete _this[ timeoutName ];\n    }, threshold );\n  };\n};\n\n// ----- docReady ----- //\n\nutils.docReady = function( callback ) {\n  var readyState = document.readyState;\n  if ( readyState == 'complete' || readyState == 'interactive' ) {\n    // do async to allow for other scripts to run. metafizzy/flickity#441\n    setTimeout( callback );\n  } else {\n    document.addEventListener( 'DOMContentLoaded', callback );\n  }\n};\n\n// ----- htmlInit ----- //\n\n// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\nutils.toDashed = function( str ) {\n  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {\n    return $1 + '-' + $2;\n  }).toLowerCase();\n};\n\nvar console = window.console;\n/**\n * allow user to initialize classes via [data-namespace] or .js-namespace class\n * htmlInit( Widget, 'widgetName' )\n * options are parsed from data-namespace-options\n */\nutils.htmlInit = function( WidgetClass, namespace ) {\n  utils.docReady( function() {\n    var dashedNamespace = utils.toDashed( namespace );\n    var dataAttr = 'data-' + dashedNamespace;\n    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );\n    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );\n    var elems = utils.makeArray( dataAttrElems )\n      .concat( utils.makeArray( jsDashElems ) );\n    var dataOptionsAttr = dataAttr + '-options';\n    var jQuery = window.jQuery;\n\n    elems.forEach( function( elem ) {\n      var attr = elem.getAttribute( dataAttr ) ||\n        elem.getAttribute( dataOptionsAttr );\n      var options;\n      try {\n        options = attr && JSON.parse( attr );\n      } catch ( error ) {\n        // log error, do not initialize\n        if ( console ) {\n          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +\n          ': ' + error );\n        }\n        return;\n      }\n      // initialize\n      var instance = new WidgetClass( elem, options );\n      // make available via $().data('namespace')\n      if ( jQuery ) {\n        jQuery.data( elem, namespace, instance );\n      }\n    });\n\n  });\n};\n\n// -----  ----- //\n\nreturn utils;\n\n}));\n\n},{\"desandro-matches-selector\":2}],5:[function(require,module,exports){\n/*!\n * getSize v2.0.3\n * measure size of elements\n * MIT license\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n/* globals console: false */\n\n( function( window, factory ) {\n  /* jshint strict: false */ /* globals define, module */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n\n})( window, function factory() {\n'use strict';\n\n// -------------------------- helpers -------------------------- //\n\n// get a number from a string, not a percentage\nfunction getStyleSize( value ) {\n  var num = parseFloat( value );\n  // not a percent like '100%', and a number\n  var isValid = value.indexOf('%') == -1 && !isNaN( num );\n  return isValid && num;\n}\n\nfunction noop() {}\n\nvar logError = typeof console == 'undefined' ? noop :\n  function( message ) {\n    console.error( message );\n  };\n\n// -------------------------- measurements -------------------------- //\n\nvar measurements = [\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'marginBottom',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopWidth',\n  'borderBottomWidth'\n];\n\nvar measurementsLength = measurements.length;\n\nfunction getZeroSize() {\n  var size = {\n    width: 0,\n    height: 0,\n    innerWidth: 0,\n    innerHeight: 0,\n    outerWidth: 0,\n    outerHeight: 0\n  };\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    size[ measurement ] = 0;\n  }\n  return size;\n}\n\n// -------------------------- getStyle -------------------------- //\n\n/**\n * getStyle, get style of element, check for Firefox bug\n * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\nfunction getStyle( elem ) {\n  var style = getComputedStyle( elem );\n  if ( !style ) {\n    logError( 'Style returned ' + style +\n      '. Are you running this code in a hidden iframe on Firefox? ' +\n      'See https://bit.ly/getsizebug1' );\n  }\n  return style;\n}\n\n// -------------------------- setup -------------------------- //\n\nvar isSetup = false;\n\nvar isBoxSizeOuter;\n\n/**\n * setup\n * check isBoxSizerOuter\n * do on first getSize() rather than on page load for Firefox bug\n */\nfunction setup() {\n  // setup once\n  if ( isSetup ) {\n    return;\n  }\n  isSetup = true;\n\n  // -------------------------- box sizing -------------------------- //\n\n  /**\n   * Chrome & Safari measure the outer-width on style.width on border-box elems\n   * IE11 & Firefox<29 measures the inner-width\n   */\n  var div = document.createElement('div');\n  div.style.width = '200px';\n  div.style.padding = '1px 2px 3px 4px';\n  div.style.borderStyle = 'solid';\n  div.style.borderWidth = '1px 2px 3px 4px';\n  div.style.boxSizing = 'border-box';\n\n  var body = document.body || document.documentElement;\n  body.appendChild( div );\n  var style = getStyle( div );\n  // round value for browser zoom. desandro/masonry#928\n  isBoxSizeOuter = Math.round( getStyleSize( style.width ) ) == 200;\n  getSize.isBoxSizeOuter = isBoxSizeOuter;\n\n  body.removeChild( div );\n}\n\n// -------------------------- getSize -------------------------- //\n\nfunction getSize( elem ) {\n  setup();\n\n  // use querySeletor if elem is string\n  if ( typeof elem == 'string' ) {\n    elem = document.querySelector( elem );\n  }\n\n  // do not proceed on non-objects\n  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {\n    return;\n  }\n\n  var style = getStyle( elem );\n\n  // if hidden, everything is 0\n  if ( style.display == 'none' ) {\n    return getZeroSize();\n  }\n\n  var size = {};\n  size.width = elem.offsetWidth;\n  size.height = elem.offsetHeight;\n\n  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n  // get all measurements\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    var value = style[ measurement ];\n    var num = parseFloat( value );\n    // any 'auto', 'medium' value will be 0\n    size[ measurement ] = !isNaN( num ) ? num : 0;\n  }\n\n  var paddingWidth = size.paddingLeft + size.paddingRight;\n  var paddingHeight = size.paddingTop + size.paddingBottom;\n  var marginWidth = size.marginLeft + size.marginRight;\n  var marginHeight = size.marginTop + size.marginBottom;\n  var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n  var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;\n\n  // overwrite width and height if we can get it from style\n  var styleWidth = getStyleSize( style.width );\n  if ( styleWidth !== false ) {\n    size.width = styleWidth +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );\n  }\n\n  var styleHeight = getStyleSize( style.height );\n  if ( styleHeight !== false ) {\n    size.height = styleHeight +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );\n  }\n\n  size.innerWidth = size.width - ( paddingWidth + borderWidth );\n  size.innerHeight = size.height - ( paddingHeight + borderHeight );\n\n  size.outerWidth = size.width + marginWidth;\n  size.outerHeight = size.height + marginHeight;\n\n  return size;\n}\n\nreturn getSize;\n\n});\n\n},{}],6:[function(require,module,exports){\n/*!\n * imagesLoaded v5.0.0\n * JavaScript is all like \"You images are done yet or what?\"\n * MIT License\n */\n\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory( window, require('ev-emitter') );\n  } else {\n    // browser global\n    window.imagesLoaded = factory( window, window.EvEmitter );\n  }\n\n} )( typeof window !== 'undefined' ? window : this,\n    function factory( window, EvEmitter ) {\n\nlet $ = window.jQuery;\nlet console = window.console;\n\n// -------------------------- helpers -------------------------- //\n\n// turn element or nodeList into an array\nfunction makeArray( obj ) {\n  // use object if already an array\n  if ( Array.isArray( obj ) ) return obj;\n\n  let isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';\n  // convert nodeList to array\n  if ( isArrayLike ) return [ ...obj ];\n\n  // array of single index\n  return [ obj ];\n}\n\n// -------------------------- imagesLoaded -------------------------- //\n\n/**\n * @param {[Array, Element, NodeList, String]} elem\n * @param {[Object, Function]} options - if function, use as callback\n * @param {Function} onAlways - callback function\n * @returns {ImagesLoaded}\n */\nfunction ImagesLoaded( elem, options, onAlways ) {\n  // coerce ImagesLoaded() without new, to be new ImagesLoaded()\n  if ( !( this instanceof ImagesLoaded ) ) {\n    return new ImagesLoaded( elem, options, onAlways );\n  }\n  // use elem as selector string\n  let queryElem = elem;\n  if ( typeof elem == 'string' ) {\n    queryElem = document.querySelectorAll( elem );\n  }\n  // bail if bad element\n  if ( !queryElem ) {\n    console.error(`Bad element for imagesLoaded ${queryElem || elem}`);\n    return;\n  }\n\n  this.elements = makeArray( queryElem );\n  this.options = {};\n  // shift arguments if no options set\n  if ( typeof options == 'function' ) {\n    onAlways = options;\n  } else {\n    Object.assign( this.options, options );\n  }\n\n  if ( onAlways ) this.on( 'always', onAlways );\n\n  this.getImages();\n  // add jQuery Deferred object\n  if ( $ ) this.jqDeferred = new $.Deferred();\n\n  // HACK check async to allow time to bind listeners\n  setTimeout( this.check.bind( this ) );\n}\n\nImagesLoaded.prototype = Object.create( EvEmitter.prototype );\n\nImagesLoaded.prototype.getImages = function() {\n  this.images = [];\n\n  // filter & find items if we have an item selector\n  this.elements.forEach( this.addElementImages, this );\n};\n\nconst elementNodeTypes = [ 1, 9, 11 ];\n\n/**\n * @param {Node} elem\n */\nImagesLoaded.prototype.addElementImages = function( elem ) {\n  // filter siblings\n  if ( elem.nodeName === 'IMG' ) {\n    this.addImage( elem );\n  }\n  // get background image on element\n  if ( this.options.background === true ) {\n    this.addElementBackgroundImages( elem );\n  }\n\n  // find children\n  // no non-element nodes, #143\n  let { nodeType } = elem;\n  if ( !nodeType || !elementNodeTypes.includes( nodeType ) ) return;\n\n  let childImgs = elem.querySelectorAll('img');\n  // concat childElems to filterFound array\n  for ( let img of childImgs ) {\n    this.addImage( img );\n  }\n\n  // get child background images\n  if ( typeof this.options.background == 'string' ) {\n    let children = elem.querySelectorAll( this.options.background );\n    for ( let child of children ) {\n      this.addElementBackgroundImages( child );\n    }\n  }\n};\n\nconst reURL = /url\\((['\"])?(.*?)\\1\\)/gi;\n\nImagesLoaded.prototype.addElementBackgroundImages = function( elem ) {\n  let style = getComputedStyle( elem );\n  // Firefox returns null if in a hidden iframe https://bugzil.la/548397\n  if ( !style ) return;\n\n  // get url inside url(\"...\")\n  let matches = reURL.exec( style.backgroundImage );\n  while ( matches !== null ) {\n    let url = matches && matches[2];\n    if ( url ) {\n      this.addBackground( url, elem );\n    }\n    matches = reURL.exec( style.backgroundImage );\n  }\n};\n\n/**\n * @param {Image} img\n */\nImagesLoaded.prototype.addImage = function( img ) {\n  let loadingImage = new LoadingImage( img );\n  this.images.push( loadingImage );\n};\n\nImagesLoaded.prototype.addBackground = function( url, elem ) {\n  let background = new Background( url, elem );\n  this.images.push( background );\n};\n\nImagesLoaded.prototype.check = function() {\n  this.progressedCount = 0;\n  this.hasAnyBroken = false;\n  // complete if no images\n  if ( !this.images.length ) {\n    this.complete();\n    return;\n  }\n\n  /* eslint-disable-next-line func-style */\n  let onProgress = ( image, elem, message ) => {\n    // HACK - Chrome triggers event before object properties have changed. #83\n    setTimeout( () => {\n      this.progress( image, elem, message );\n    } );\n  };\n\n  this.images.forEach( function( loadingImage ) {\n    loadingImage.once( 'progress', onProgress );\n    loadingImage.check();\n  } );\n};\n\nImagesLoaded.prototype.progress = function( image, elem, message ) {\n  this.progressedCount++;\n  this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;\n  // progress event\n  this.emitEvent( 'progress', [ this, image, elem ] );\n  if ( this.jqDeferred && this.jqDeferred.notify ) {\n    this.jqDeferred.notify( this, image );\n  }\n  // check if completed\n  if ( this.progressedCount === this.images.length ) {\n    this.complete();\n  }\n\n  if ( this.options.debug && console ) {\n    console.log( `progress: ${message}`, image, elem );\n  }\n};\n\nImagesLoaded.prototype.complete = function() {\n  let eventName = this.hasAnyBroken ? 'fail' : 'done';\n  this.isComplete = true;\n  this.emitEvent( eventName, [ this ] );\n  this.emitEvent( 'always', [ this ] );\n  if ( this.jqDeferred ) {\n    let jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';\n    this.jqDeferred[ jqMethod ]( this );\n  }\n};\n\n// --------------------------  -------------------------- //\n\nfunction LoadingImage( img ) {\n  this.img = img;\n}\n\nLoadingImage.prototype = Object.create( EvEmitter.prototype );\n\nLoadingImage.prototype.check = function() {\n  // If complete is true and browser supports natural sizes,\n  // try to check for image status manually.\n  let isComplete = this.getIsImageComplete();\n  if ( isComplete ) {\n    // report based on naturalWidth\n    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );\n    return;\n  }\n\n  // If none of the checks above matched, simulate loading on detached element.\n  this.proxyImage = new Image();\n  // add crossOrigin attribute. #204\n  if ( this.img.crossOrigin ) {\n    this.proxyImage.crossOrigin = this.img.crossOrigin;\n  }\n  this.proxyImage.addEventListener( 'load', this );\n  this.proxyImage.addEventListener( 'error', this );\n  // bind to image as well for Firefox. #191\n  this.img.addEventListener( 'load', this );\n  this.img.addEventListener( 'error', this );\n  this.proxyImage.src = this.img.currentSrc || this.img.src;\n};\n\nLoadingImage.prototype.getIsImageComplete = function() {\n  // check for non-zero, non-undefined naturalWidth\n  // fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671\n  return this.img.complete && this.img.naturalWidth;\n};\n\nLoadingImage.prototype.confirm = function( isLoaded, message ) {\n  this.isLoaded = isLoaded;\n  let { parentNode } = this.img;\n  // emit progress with parent <picture> or self <img>\n  let elem = parentNode.nodeName === 'PICTURE' ? parentNode : this.img;\n  this.emitEvent( 'progress', [ this, elem, message ] );\n};\n\n// ----- events ----- //\n\n// trigger specified handler for event type\nLoadingImage.prototype.handleEvent = function( event ) {\n  let method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\nLoadingImage.prototype.onload = function() {\n  this.confirm( true, 'onload' );\n  this.unbindEvents();\n};\n\nLoadingImage.prototype.onerror = function() {\n  this.confirm( false, 'onerror' );\n  this.unbindEvents();\n};\n\nLoadingImage.prototype.unbindEvents = function() {\n  this.proxyImage.removeEventListener( 'load', this );\n  this.proxyImage.removeEventListener( 'error', this );\n  this.img.removeEventListener( 'load', this );\n  this.img.removeEventListener( 'error', this );\n};\n\n// -------------------------- Background -------------------------- //\n\nfunction Background( url, element ) {\n  this.url = url;\n  this.element = element;\n  this.img = new Image();\n}\n\n// inherit LoadingImage prototype\nBackground.prototype = Object.create( LoadingImage.prototype );\n\nBackground.prototype.check = function() {\n  this.img.addEventListener( 'load', this );\n  this.img.addEventListener( 'error', this );\n  this.img.src = this.url;\n  // check if image is already complete\n  let isComplete = this.getIsImageComplete();\n  if ( isComplete ) {\n    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );\n    this.unbindEvents();\n  }\n};\n\nBackground.prototype.unbindEvents = function() {\n  this.img.removeEventListener( 'load', this );\n  this.img.removeEventListener( 'error', this );\n};\n\nBackground.prototype.confirm = function( isLoaded, message ) {\n  this.isLoaded = isLoaded;\n  this.emitEvent( 'progress', [ this, this.element, message ] );\n};\n\n// -------------------------- jQuery -------------------------- //\n\nImagesLoaded.makeJQueryPlugin = function( jQuery ) {\n  jQuery = jQuery || window.jQuery;\n  if ( !jQuery ) return;\n\n  // set local variable\n  $ = jQuery;\n  // $().imagesLoaded()\n  $.fn.imagesLoaded = function( options, onAlways ) {\n    let instance = new ImagesLoaded( this, options, onAlways );\n    return instance.jqDeferred.promise( $( this ) );\n  };\n};\n// try making plugin\nImagesLoaded.makeJQueryPlugin();\n\n// --------------------------  -------------------------- //\n\nreturn ImagesLoaded;\n\n} );\n\n},{\"ev-emitter\":3}],7:[function(require,module,exports){\n(function(window, factory) {\n\tvar lazySizes = factory(window, window.document, Date);\n\twindow.lazySizes = lazySizes;\n\tif(typeof module == 'object' && module.exports){\n\t\tmodule.exports = lazySizes;\n\t}\n}(typeof window != 'undefined' ?\n      window : {}, \n/**\n * import(\"./types/global\")\n * @typedef { import(\"./types/lazysizes-config\").LazySizesConfigPartial } LazySizesConfigPartial\n */\nfunction l(window, document, Date) { // Pass in the window Date function also for SSR because the Date class can be lost\n\t'use strict';\n\t/*jshint eqnull:true */\n\n\tvar lazysizes,\n\t\t/**\n\t\t * @type { LazySizesConfigPartial }\n\t\t */\n\t\tlazySizesCfg;\n\n\t(function(){\n\t\tvar prop;\n\n\t\tvar lazySizesDefaults = {\n\t\t\tlazyClass: 'lazyload',\n\t\t\tloadedClass: 'lazyloaded',\n\t\t\tloadingClass: 'lazyloading',\n\t\t\tpreloadClass: 'lazypreload',\n\t\t\terrorClass: 'lazyerror',\n\t\t\t//strictClass: 'lazystrict',\n\t\t\tautosizesClass: 'lazyautosizes',\n\t\t\tfastLoadedClass: 'ls-is-cached',\n\t\t\tiframeLoadMode: 0,\n\t\t\tsrcAttr: 'data-src',\n\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\tsizesAttr: 'data-sizes',\n\t\t\t//preloadAfterLoad: false,\n\t\t\tminSize: 40,\n\t\t\tcustomMedia: {},\n\t\t\tinit: true,\n\t\t\texpFactor: 1.5,\n\t\t\thFac: 0.8,\n\t\t\tloadMode: 2,\n\t\t\tloadHidden: true,\n\t\t\tricTimeout: 0,\n\t\t\tthrottleDelay: 125,\n\t\t};\n\n\t\tlazySizesCfg = window.lazySizesConfig || window.lazysizesConfig || {};\n\n\t\tfor(prop in lazySizesDefaults){\n\t\t\tif(!(prop in lazySizesCfg)){\n\t\t\t\tlazySizesCfg[prop] = lazySizesDefaults[prop];\n\t\t\t}\n\t\t}\n\t})();\n\n\tif (!document || !document.getElementsByClassName) {\n\t\treturn {\n\t\t\tinit: function () {},\n\t\t\t/**\n\t\t\t * @type { LazySizesConfigPartial }\n\t\t\t */\n\t\t\tcfg: lazySizesCfg,\n\t\t\t/**\n\t\t\t * @type { true }\n\t\t\t */\n\t\t\tnoSupport: true,\n\t\t};\n\t}\n\n\tvar docElem = document.documentElement;\n\n\tvar supportPicture = window.HTMLPictureElement;\n\n\tvar _addEventListener = 'addEventListener';\n\n\tvar _getAttribute = 'getAttribute';\n\n\t/**\n\t * Update to bind to window because 'this' becomes null during SSR\n\t * builds.\n\t */\n\tvar addEventListener = window[_addEventListener].bind(window);\n\n\tvar setTimeout = window.setTimeout;\n\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\tvar requestIdleCallback = window.requestIdleCallback;\n\n\tvar regPicture = /^picture$/i;\n\n\tvar loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];\n\n\tvar regClassCache = {};\n\n\tvar forEach = Array.prototype.forEach;\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar hasClass = function(ele, cls) {\n\t\tif(!regClassCache[cls]){\n\t\t\tregClassCache[cls] = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\n\t\t}\n\t\treturn regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];\n\t};\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar addClass = function(ele, cls) {\n\t\tif (!hasClass(ele, cls)){\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);\n\t\t}\n\t};\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar removeClass = function(ele, cls) {\n\t\tvar reg;\n\t\tif ((reg = hasClass(ele,cls))) {\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));\n\t\t}\n\t};\n\n\tvar addRemoveLoadEvents = function(dom, fn, add){\n\t\tvar action = add ? _addEventListener : 'removeEventListener';\n\t\tif(add){\n\t\t\taddRemoveLoadEvents(dom, fn);\n\t\t}\n\t\tloadEvents.forEach(function(evt){\n\t\t\tdom[action](evt, fn);\n\t\t});\n\t};\n\n\t/**\n\t * @param elem { Element }\n\t * @param name { string }\n\t * @param detail { any }\n\t * @param noBubbles { boolean }\n\t * @param noCancelable { boolean }\n\t * @returns { CustomEvent }\n\t */\n\tvar triggerEvent = function(elem, name, detail, noBubbles, noCancelable){\n\t\tvar event = document.createEvent('Event');\n\n\t\tif(!detail){\n\t\t\tdetail = {};\n\t\t}\n\n\t\tdetail.instance = lazysizes;\n\n\t\tevent.initEvent(name, !noBubbles, !noCancelable);\n\n\t\tevent.detail = detail;\n\n\t\telem.dispatchEvent(event);\n\t\treturn event;\n\t};\n\n\tvar updatePolyfill = function (el, full){\n\t\tvar polyfill;\n\t\tif( !supportPicture && ( polyfill = (window.picturefill || lazySizesCfg.pf) ) ){\n\t\t\tif(full && full.src && !el[_getAttribute]('srcset')){\n\t\t\t\tel.setAttribute('srcset', full.src);\n\t\t\t}\n\t\t\tpolyfill({reevaluate: true, elements: [el]});\n\t\t} else if(full && full.src){\n\t\t\tel.src = full.src;\n\t\t}\n\t};\n\n\tvar getCSS = function (elem, style){\n\t\treturn (getComputedStyle(elem, null) || {})[style];\n\t};\n\n\t/**\n\t *\n\t * @param elem { Element }\n\t * @param parent { Element }\n\t * @param [width] {number}\n\t * @returns {number}\n\t */\n\tvar getWidth = function(elem, parent, width){\n\t\twidth = width || elem.offsetWidth;\n\n\t\twhile(width < lazySizesCfg.minSize && parent && !elem._lazysizesWidth){\n\t\t\twidth =  parent.offsetWidth;\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tvar rAF = (function(){\n\t\tvar running, waiting;\n\t\tvar firstFns = [];\n\t\tvar secondFns = [];\n\t\tvar fns = firstFns;\n\n\t\tvar run = function(){\n\t\t\tvar runFns = fns;\n\n\t\t\tfns = firstFns.length ? secondFns : firstFns;\n\n\t\t\trunning = true;\n\t\t\twaiting = false;\n\n\t\t\twhile(runFns.length){\n\t\t\t\trunFns.shift()();\n\t\t\t}\n\n\t\t\trunning = false;\n\t\t};\n\n\t\tvar rafBatch = function(fn, queue){\n\t\t\tif(running && !queue){\n\t\t\t\tfn.apply(this, arguments);\n\t\t\t} else {\n\t\t\t\tfns.push(fn);\n\n\t\t\t\tif(!waiting){\n\t\t\t\t\twaiting = true;\n\t\t\t\t\t(document.hidden ? setTimeout : requestAnimationFrame)(run);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trafBatch._lsFlush = run;\n\n\t\treturn rafBatch;\n\t})();\n\n\tvar rAFIt = function(fn, simple){\n\t\treturn simple ?\n\t\t\tfunction() {\n\t\t\t\trAF(fn);\n\t\t\t} :\n\t\t\tfunction(){\n\t\t\t\tvar that = this;\n\t\t\t\tvar args = arguments;\n\t\t\t\trAF(function(){\n\t\t\t\t\tfn.apply(that, args);\n\t\t\t\t});\n\t\t\t}\n\t\t;\n\t};\n\n\tvar throttle = function(fn){\n\t\tvar running;\n\t\tvar lastTime = 0;\n\t\tvar gDelay = lazySizesCfg.throttleDelay;\n\t\tvar rICTimeout = lazySizesCfg.ricTimeout;\n\t\tvar run = function(){\n\t\t\trunning = false;\n\t\t\tlastTime = Date.now();\n\t\t\tfn();\n\t\t};\n\t\tvar idleCallback = requestIdleCallback && rICTimeout > 49 ?\n\t\t\tfunction(){\n\t\t\t\trequestIdleCallback(run, {timeout: rICTimeout});\n\n\t\t\t\tif(rICTimeout !== lazySizesCfg.ricTimeout){\n\t\t\t\t\trICTimeout = lazySizesCfg.ricTimeout;\n\t\t\t\t}\n\t\t\t} :\n\t\t\trAFIt(function(){\n\t\t\t\tsetTimeout(run);\n\t\t\t}, true)\n\t\t;\n\n\t\treturn function(isPriority){\n\t\t\tvar delay;\n\n\t\t\tif((isPriority = isPriority === true)){\n\t\t\t\trICTimeout = 33;\n\t\t\t}\n\n\t\t\tif(running){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trunning =  true;\n\n\t\t\tdelay = gDelay - (Date.now() - lastTime);\n\n\t\t\tif(delay < 0){\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif(isPriority || delay < 9){\n\t\t\t\tidleCallback();\n\t\t\t} else {\n\t\t\t\tsetTimeout(idleCallback, delay);\n\t\t\t}\n\t\t};\n\t};\n\n\t//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html\n\tvar debounce = function(func) {\n\t\tvar timeout, timestamp;\n\t\tvar wait = 99;\n\t\tvar run = function(){\n\t\t\ttimeout = null;\n\t\t\tfunc();\n\t\t};\n\t\tvar later = function() {\n\t\t\tvar last = Date.now() - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tsetTimeout(later, wait - last);\n\t\t\t} else {\n\t\t\t\t(requestIdleCallback || run)(run);\n\t\t\t}\n\t\t};\n\n\t\treturn function() {\n\t\t\ttimestamp = Date.now();\n\n\t\t\tif (!timeout) {\n\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t}\n\t\t};\n\t};\n\n\tvar loader = (function(){\n\t\tvar preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;\n\n\t\tvar eLvW, elvH, eLtop, eLleft, eLright, eLbottom, isBodyHidden;\n\n\t\tvar regImg = /^img$/i;\n\t\tvar regIframe = /^iframe$/i;\n\n\t\tvar supportScroll = ('onscroll' in window) && !(/(gle|ing)bot/.test(navigator.userAgent));\n\n\t\tvar shrinkExpand = 0;\n\t\tvar currentExpand = 0;\n\n\t\tvar isLoading = 0;\n\t\tvar lowRuns = -1;\n\n\t\tvar resetPreloading = function(e){\n\t\t\tisLoading--;\n\t\t\tif(!e || isLoading < 0 || !e.target){\n\t\t\t\tisLoading = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar isVisible = function (elem) {\n\t\t\tif (isBodyHidden == null) {\n\t\t\t\tisBodyHidden = getCSS(document.body, 'visibility') == 'hidden';\n\t\t\t}\n\n\t\t\treturn isBodyHidden || !(getCSS(elem.parentNode, 'visibility') == 'hidden' && getCSS(elem, 'visibility') == 'hidden');\n\t\t};\n\n\t\tvar isNestedVisible = function(elem, elemExpand){\n\t\t\tvar outerRect;\n\t\t\tvar parent = elem;\n\t\t\tvar visible = isVisible(elem);\n\n\t\t\teLtop -= elemExpand;\n\t\t\teLbottom += elemExpand;\n\t\t\teLleft -= elemExpand;\n\t\t\teLright += elemExpand;\n\n\t\t\twhile(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){\n\t\t\t\tvisible = ((getCSS(parent, 'opacity') || 1) > 0);\n\n\t\t\t\tif(visible && getCSS(parent, 'overflow') != 'visible'){\n\t\t\t\t\touterRect = parent.getBoundingClientRect();\n\t\t\t\t\tvisible = eLright > outerRect.left &&\n\t\t\t\t\t\teLleft < outerRect.right &&\n\t\t\t\t\t\teLbottom > outerRect.top - 1 &&\n\t\t\t\t\t\teLtop < outerRect.bottom + 1\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn visible;\n\t\t};\n\n\t\tvar checkElements = function() {\n\t\t\tvar eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal,\n\t\t\t\tbeforeExpandVal, defaultExpand, preloadExpand, hFac;\n\t\t\tvar lazyloadElems = lazysizes.elements;\n\n\t\t\tif((loadMode = lazySizesCfg.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){\n\n\t\t\t\ti = 0;\n\n\t\t\t\tlowRuns++;\n\n\t\t\t\tfor(; i < eLlen; i++){\n\n\t\t\t\t\tif(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}\n\n\t\t\t\t\tif(!supportScroll || (lazysizes.prematureUnveil && lazysizes.prematureUnveil(lazyloadElems[i]))){unveilElement(lazyloadElems[i]);continue;}\n\n\t\t\t\t\tif(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){\n\t\t\t\t\t\telemExpand = currentExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!defaultExpand) {\n\t\t\t\t\t\tdefaultExpand = (!lazySizesCfg.expand || lazySizesCfg.expand < 1) ?\n\t\t\t\t\t\t\tdocElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370 :\n\t\t\t\t\t\t\tlazySizesCfg.expand;\n\n\t\t\t\t\t\tlazysizes._defEx = defaultExpand;\n\n\t\t\t\t\t\tpreloadExpand = defaultExpand * lazySizesCfg.expFactor;\n\t\t\t\t\t\thFac = lazySizesCfg.hFac;\n\t\t\t\t\t\tisBodyHidden = null;\n\n\t\t\t\t\t\tif(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){\n\t\t\t\t\t\t\tcurrentExpand = preloadExpand;\n\t\t\t\t\t\t\tlowRuns = 0;\n\t\t\t\t\t\t} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){\n\t\t\t\t\t\t\tcurrentExpand = defaultExpand;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrentExpand = shrinkExpand;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(beforeExpandVal !== elemExpand){\n\t\t\t\t\t\teLvW = innerWidth + (elemExpand * hFac);\n\t\t\t\t\t\telvH = innerHeight + elemExpand;\n\t\t\t\t\t\telemNegativeExpand = elemExpand * -1;\n\t\t\t\t\t\tbeforeExpandVal = elemExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\trect = lazyloadElems[i].getBoundingClientRect();\n\n\t\t\t\t\tif ((eLbottom = rect.bottom) >= elemNegativeExpand &&\n\t\t\t\t\t\t(eLtop = rect.top) <= elvH &&\n\t\t\t\t\t\t(eLright = rect.right) >= elemNegativeExpand * hFac &&\n\t\t\t\t\t\t(eLleft = rect.left) <= eLvW &&\n\t\t\t\t\t\t(eLbottom || eLright || eLleft || eLtop) &&\n\t\t\t\t\t\t(lazySizesCfg.loadHidden || isVisible(lazyloadElems[i])) &&\n\t\t\t\t\t\t((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){\n\t\t\t\t\t\tunveilElement(lazyloadElems[i]);\n\t\t\t\t\t\tloadedSomething = true;\n\t\t\t\t\t\tif(isLoading > 9){break;}\n\t\t\t\t\t} else if(!loadedSomething && isCompleted && !autoLoadElem &&\n\t\t\t\t\t\tisLoading < 4 && lowRuns < 4 && loadMode > 2 &&\n\t\t\t\t\t\t(preloadElems[0] || lazySizesCfg.preloadAfterLoad) &&\n\t\t\t\t\t\t(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesCfg.sizesAttr) != 'auto')))){\n\t\t\t\t\t\tautoLoadElem = preloadElems[0] || lazyloadElems[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(autoLoadElem && !loadedSomething){\n\t\t\t\t\tunveilElement(autoLoadElem);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar throttledCheckElements = throttle(checkElements);\n\n\t\tvar switchLoadingClass = function(e){\n\t\t\tvar elem = e.target;\n\n\t\t\tif (elem._lazyCache) {\n\t\t\t\tdelete elem._lazyCache;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresetPreloading(e);\n\t\t\taddClass(elem, lazySizesCfg.loadedClass);\n\t\t\tremoveClass(elem, lazySizesCfg.loadingClass);\n\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass);\n\t\t\ttriggerEvent(elem, 'lazyloaded');\n\t\t};\n\t\tvar rafedSwitchLoadingClass = rAFIt(switchLoadingClass);\n\t\tvar rafSwitchLoadingClass = function(e){\n\t\t\trafedSwitchLoadingClass({target: e.target});\n\t\t};\n\n\t\tvar changeIframeSrc = function(elem, src){\n\t\t\tvar loadMode = elem.getAttribute('data-load-mode') || lazySizesCfg.iframeLoadMode;\n\n\t\t\t// loadMode can be also a string!\n\t\t\tif (loadMode == 0) {\n\t\t\t\telem.contentWindow.location.replace(src);\n\t\t\t} else if (loadMode == 1) {\n\t\t\t\telem.src = src;\n\t\t\t}\n\t\t};\n\n\t\tvar handleSources = function(source){\n\t\t\tvar customMedia;\n\n\t\t\tvar sourceSrcset = source[_getAttribute](lazySizesCfg.srcsetAttr);\n\n\t\t\tif( (customMedia = lazySizesCfg.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){\n\t\t\t\tsource.setAttribute('media', customMedia);\n\t\t\t}\n\n\t\t\tif(sourceSrcset){\n\t\t\t\tsource.setAttribute('srcset', sourceSrcset);\n\t\t\t}\n\t\t};\n\n\t\tvar lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){\n\t\t\tvar src, srcset, parent, isPicture, event, firesLoad;\n\n\t\t\tif(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){\n\n\t\t\t\tif(sizes){\n\t\t\t\t\tif(isAuto){\n\t\t\t\t\t\taddClass(elem, lazySizesCfg.autosizesClass);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.setAttribute('sizes', sizes);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsrcset = elem[_getAttribute](lazySizesCfg.srcsetAttr);\n\t\t\t\tsrc = elem[_getAttribute](lazySizesCfg.srcAttr);\n\n\t\t\t\tif(isImg) {\n\t\t\t\t\tparent = elem.parentNode;\n\t\t\t\t\tisPicture = parent && regPicture.test(parent.nodeName || '');\n\t\t\t\t}\n\n\t\t\t\tfiresLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));\n\n\t\t\t\tevent = {target: elem};\n\n\t\t\t\taddClass(elem, lazySizesCfg.loadingClass);\n\n\t\t\t\tif(firesLoad){\n\t\t\t\t\tclearTimeout(resetPreloadingTimer);\n\t\t\t\t\tresetPreloadingTimer = setTimeout(resetPreloading, 2500);\n\t\t\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass, true);\n\t\t\t\t}\n\n\t\t\t\tif(isPicture){\n\t\t\t\t\tforEach.call(parent.getElementsByTagName('source'), handleSources);\n\t\t\t\t}\n\n\t\t\t\tif(srcset){\n\t\t\t\t\telem.setAttribute('srcset', srcset);\n\t\t\t\t} else if(src && !isPicture){\n\t\t\t\t\tif(regIframe.test(elem.nodeName)){\n\t\t\t\t\t\tchangeIframeSrc(elem, src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.src = src;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(isImg && (srcset || isPicture)){\n\t\t\t\t\tupdatePolyfill(elem, {src: src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(elem._lazyRace){\n\t\t\t\tdelete elem._lazyRace;\n\t\t\t}\n\t\t\tremoveClass(elem, lazySizesCfg.lazyClass);\n\n\t\t\trAF(function(){\n\t\t\t\t// Part of this can be removed as soon as this fix is older: https://bugs.chromium.org/p/chromium/issues/detail?id=7731 (2015)\n\t\t\t\tvar isLoaded = elem.complete && elem.naturalWidth > 1;\n\n\t\t\t\tif( !firesLoad || isLoaded){\n\t\t\t\t\tif (isLoaded) {\n\t\t\t\t\t\taddClass(elem, lazySizesCfg.fastLoadedClass);\n\t\t\t\t\t}\n\t\t\t\t\tswitchLoadingClass(event);\n\t\t\t\t\telem._lazyCache = true;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tif ('_lazyCache' in elem) {\n\t\t\t\t\t\t\tdelete elem._lazyCache;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 9);\n\t\t\t\t}\n\t\t\t\tif (elem.loading == 'lazy') {\n\t\t\t\t\tisLoading--;\n\t\t\t\t}\n\t\t\t}, true);\n\t\t});\n\n\t\t/**\n\t\t *\n\t\t * @param elem { Element }\n\t\t */\n\t\tvar unveilElement = function (elem){\n\t\t\tif (elem._lazyRace) {return;}\n\t\t\tvar detail;\n\n\t\t\tvar isImg = regImg.test(elem.nodeName);\n\n\t\t\t//allow using sizes=\"auto\", but don't use. it's invalid. Use data-sizes=\"auto\" or a valid value for sizes instead (i.e.: sizes=\"80vw\")\n\t\t\tvar sizes = isImg && (elem[_getAttribute](lazySizesCfg.sizesAttr) || elem[_getAttribute]('sizes'));\n\t\t\tvar isAuto = sizes == 'auto';\n\n\t\t\tif( (isAuto || !isCompleted) && isImg && (elem[_getAttribute]('src') || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesCfg.errorClass) && hasClass(elem, lazySizesCfg.lazyClass)){return;}\n\n\t\t\tdetail = triggerEvent(elem, 'lazyunveilread').detail;\n\n\t\t\tif(isAuto){\n\t\t\t\t autoSizer.updateElem(elem, true, elem.offsetWidth);\n\t\t\t}\n\n\t\t\telem._lazyRace = true;\n\t\t\tisLoading++;\n\n\t\t\tlazyUnveil(elem, detail, isAuto, sizes, isImg);\n\t\t};\n\n\t\tvar afterScroll = debounce(function(){\n\t\t\tlazySizesCfg.loadMode = 3;\n\t\t\tthrottledCheckElements();\n\t\t});\n\n\t\tvar altLoadmodeScrollListner = function(){\n\t\t\tif(lazySizesCfg.loadMode == 3){\n\t\t\t\tlazySizesCfg.loadMode = 2;\n\t\t\t}\n\t\t\tafterScroll();\n\t\t};\n\n\t\tvar onload = function(){\n\t\t\tif(isCompleted){return;}\n\t\t\tif(Date.now() - started < 999){\n\t\t\t\tsetTimeout(onload, 999);\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tisCompleted = true;\n\n\t\t\tlazySizesCfg.loadMode = 3;\n\n\t\t\tthrottledCheckElements();\n\n\t\t\taddEventListener('scroll', altLoadmodeScrollListner, true);\n\t\t};\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tstarted = Date.now();\n\n\t\t\t\tlazysizes.elements = document.getElementsByClassName(lazySizesCfg.lazyClass);\n\t\t\t\tpreloadElems = document.getElementsByClassName(lazySizesCfg.lazyClass + ' ' + lazySizesCfg.preloadClass);\n\n\t\t\t\taddEventListener('scroll', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('resize', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('pageshow', function (e) {\n\t\t\t\t\tif (e.persisted) {\n\t\t\t\t\t\tvar loadingElements = document.querySelectorAll('.' + lazySizesCfg.loadingClass);\n\n\t\t\t\t\t\tif (loadingElements.length && loadingElements.forEach) {\n\t\t\t\t\t\t\trequestAnimationFrame(function () {\n\t\t\t\t\t\t\t\tloadingElements.forEach( function (img) {\n\t\t\t\t\t\t\t\t\tif (img.complete) {\n\t\t\t\t\t\t\t\t\t\tunveilElement(img);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif(window.MutationObserver){\n\t\t\t\t\tnew MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );\n\t\t\t\t} else {\n\t\t\t\t\tdocElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);\n\t\t\t\t\tdocElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);\n\t\t\t\t\tsetInterval(throttledCheckElements, 999);\n\t\t\t\t}\n\n\t\t\t\taddEventListener('hashchange', throttledCheckElements, true);\n\n\t\t\t\t//, 'fullscreenchange'\n\t\t\t\t['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend'].forEach(function(name){\n\t\t\t\t\tdocument[_addEventListener](name, throttledCheckElements, true);\n\t\t\t\t});\n\n\t\t\t\tif((/d$|^c/.test(document.readyState))){\n\t\t\t\t\tonload();\n\t\t\t\t} else {\n\t\t\t\t\taddEventListener('load', onload);\n\t\t\t\t\tdocument[_addEventListener]('DOMContentLoaded', throttledCheckElements);\n\t\t\t\t\tsetTimeout(onload, 20000);\n\t\t\t\t}\n\n\t\t\t\tif(lazysizes.elements.length){\n\t\t\t\t\tcheckElements();\n\t\t\t\t\trAF._lsFlush();\n\t\t\t\t} else {\n\t\t\t\t\tthrottledCheckElements();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcheckElems: throttledCheckElements,\n\t\t\tunveil: unveilElement,\n\t\t\t_aLSL: altLoadmodeScrollListner,\n\t\t};\n\t})();\n\n\n\tvar autoSizer = (function(){\n\t\tvar autosizesElems;\n\n\t\tvar sizeElement = rAFIt(function(elem, parent, event, width){\n\t\t\tvar sources, i, len;\n\t\t\telem._lazysizesWidth = width;\n\t\t\twidth += 'px';\n\n\t\t\telem.setAttribute('sizes', width);\n\n\t\t\tif(regPicture.test(parent.nodeName || '')){\n\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\tsources[i].setAttribute('sizes', width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!event.detail.dataAttr){\n\t\t\t\tupdatePolyfill(elem, event.detail);\n\t\t\t}\n\t\t});\n\t\t/**\n\t\t *\n\t\t * @param elem {Element}\n\t\t * @param dataAttr\n\t\t * @param [width] { number }\n\t\t */\n\t\tvar getSizeElement = function (elem, dataAttr, width){\n\t\t\tvar event;\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif(parent){\n\t\t\t\twidth = getWidth(elem, parent, width);\n\t\t\t\tevent = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});\n\n\t\t\t\tif(!event.defaultPrevented){\n\t\t\t\t\twidth = event.detail.width;\n\n\t\t\t\t\tif(width && width !== elem._lazysizesWidth){\n\t\t\t\t\t\tsizeElement(elem, parent, event, width);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar updateElementsSizes = function(){\n\t\t\tvar i;\n\t\t\tvar len = autosizesElems.length;\n\t\t\tif(len){\n\t\t\t\ti = 0;\n\n\t\t\t\tfor(; i < len; i++){\n\t\t\t\t\tgetSizeElement(autosizesElems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar debouncedUpdateElementsSizes = debounce(updateElementsSizes);\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tautosizesElems = document.getElementsByClassName(lazySizesCfg.autosizesClass);\n\t\t\t\taddEventListener('resize', debouncedUpdateElementsSizes);\n\t\t\t},\n\t\t\tcheckElems: debouncedUpdateElementsSizes,\n\t\t\tupdateElem: getSizeElement\n\t\t};\n\t})();\n\n\tvar init = function(){\n\t\tif(!init.i && document.getElementsByClassName){\n\t\t\tinit.i = true;\n\t\t\tautoSizer._();\n\t\t\tloader._();\n\t\t}\n\t};\n\n\tsetTimeout(function(){\n\t\tif(lazySizesCfg.init){\n\t\t\tinit();\n\t\t}\n\t});\n\n\tlazysizes = {\n\t\t/**\n\t\t * @type { LazySizesConfigPartial }\n\t\t */\n\t\tcfg: lazySizesCfg,\n\t\tautoSizer: autoSizer,\n\t\tloader: loader,\n\t\tinit: init,\n\t\tuP: updatePolyfill,\n\t\taC: addClass,\n\t\trC: removeClass,\n\t\thC: hasClass,\n\t\tfire: triggerEvent,\n\t\tgW: getWidth,\n\t\trAF: rAF,\n\t};\n\n\treturn lazysizes;\n}\n));\n\n},{}],8:[function(require,module,exports){\n/*!\n * Masonry v4.2.2\n * Cascading grid layout library\n * https://masonry.desandro.com\n * MIT License\n * by David DeSandro\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n        'outlayer/outlayer',\n        'get-size/get-size'\n      ],\n      factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('outlayer'),\n      require('get-size')\n    );\n  } else {\n    // browser global\n    window.Masonry = factory(\n      window.Outlayer,\n      window.getSize\n    );\n  }\n\n}( window, function factory( Outlayer, getSize ) {\n\n'use strict';\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Masonry = Outlayer.create('masonry');\n  // isFitWidth -> fitWidth\n  Masonry.compatOptions.fitWidth = 'isFitWidth';\n\n  var proto = Masonry.prototype;\n\n  proto._resetLayout = function() {\n    this.getSize();\n    this._getMeasurement( 'columnWidth', 'outerWidth' );\n    this._getMeasurement( 'gutter', 'outerWidth' );\n    this.measureColumns();\n\n    // reset column Y\n    this.colYs = [];\n    for ( var i=0; i < this.cols; i++ ) {\n      this.colYs.push( 0 );\n    }\n\n    this.maxY = 0;\n    this.horizontalColIndex = 0;\n  };\n\n  proto.measureColumns = function() {\n    this.getContainerWidth();\n    // if columnWidth is 0, default to outerWidth of first item\n    if ( !this.columnWidth ) {\n      var firstItem = this.items[0];\n      var firstItemElem = firstItem && firstItem.element;\n      // columnWidth fall back to item of first element\n      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||\n        // if first elem has no width, default to size of container\n        this.containerWidth;\n    }\n\n    var columnWidth = this.columnWidth += this.gutter;\n\n    // calculate columns\n    var containerWidth = this.containerWidth + this.gutter;\n    var cols = containerWidth / columnWidth;\n    // fix rounding errors, typically with gutters\n    var excess = columnWidth - containerWidth % columnWidth;\n    // if overshoot is less than a pixel, round up, otherwise floor it\n    var mathMethod = excess && excess < 1 ? 'round' : 'floor';\n    cols = Math[ mathMethod ]( cols );\n    this.cols = Math.max( cols, 1 );\n  };\n\n  proto.getContainerWidth = function() {\n    // container is parent if fit width\n    var isFitWidth = this._getOption('fitWidth');\n    var container = isFitWidth ? this.element.parentNode : this.element;\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var size = getSize( container );\n    this.containerWidth = size && size.innerWidth;\n  };\n\n  proto._getItemLayoutPosition = function( item ) {\n    item.getSize();\n    // how many columns does this brick span\n    var remainder = item.size.outerWidth % this.columnWidth;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\n    // round if off by 1 pixel, otherwise use ceil\n    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );\n    colSpan = Math.min( colSpan, this.cols );\n    // use horizontal or top column position\n    var colPosMethod = this.options.horizontalOrder ?\n      '_getHorizontalColPosition' : '_getTopColPosition';\n    var colPosition = this[ colPosMethod ]( colSpan, item );\n    // position the brick\n    var position = {\n      x: this.columnWidth * colPosition.col,\n      y: colPosition.y\n    };\n    // apply setHeight to necessary columns\n    var setHeight = colPosition.y + item.size.outerHeight;\n    var setMax = colSpan + colPosition.col;\n    for ( var i = colPosition.col; i < setMax; i++ ) {\n      this.colYs[i] = setHeight;\n    }\n\n    return position;\n  };\n\n  proto._getTopColPosition = function( colSpan ) {\n    var colGroup = this._getTopColGroup( colSpan );\n    // get the minimum Y value from the columns\n    var minimumY = Math.min.apply( Math, colGroup );\n\n    return {\n      col: colGroup.indexOf( minimumY ),\n      y: minimumY,\n    };\n  };\n\n  /**\n   * @param {Number} colSpan - number of columns the element spans\n   * @returns {Array} colGroup\n   */\n  proto._getTopColGroup = function( colSpan ) {\n    if ( colSpan < 2 ) {\n      // if brick spans only one column, use all the column Ys\n      return this.colYs;\n    }\n\n    var colGroup = [];\n    // how many different places could this brick fit horizontally\n    var groupCount = this.cols + 1 - colSpan;\n    // for each group potential horizontal position\n    for ( var i = 0; i < groupCount; i++ ) {\n      colGroup[i] = this._getColGroupY( i, colSpan );\n    }\n    return colGroup;\n  };\n\n  proto._getColGroupY = function( col, colSpan ) {\n    if ( colSpan < 2 ) {\n      return this.colYs[ col ];\n    }\n    // make an array of colY values for that one group\n    var groupColYs = this.colYs.slice( col, col + colSpan );\n    // and get the max value of the array\n    return Math.max.apply( Math, groupColYs );\n  };\n\n  // get column position based on horizontal index. #873\n  proto._getHorizontalColPosition = function( colSpan, item ) {\n    var col = this.horizontalColIndex % this.cols;\n    var isOver = colSpan > 1 && col + colSpan > this.cols;\n    // shift to next row if item can't fit on current row\n    col = isOver ? 0 : col;\n    // don't let zero-size items take up space\n    var hasSize = item.size.outerWidth && item.size.outerHeight;\n    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;\n\n    return {\n      col: col,\n      y: this._getColGroupY( col, colSpan ),\n    };\n  };\n\n  proto._manageStamp = function( stamp ) {\n    var stampSize = getSize( stamp );\n    var offset = this._getElementOffset( stamp );\n    // get the columns that this stamp affects\n    var isOriginLeft = this._getOption('originLeft');\n    var firstX = isOriginLeft ? offset.left : offset.right;\n    var lastX = firstX + stampSize.outerWidth;\n    var firstCol = Math.floor( firstX / this.columnWidth );\n    firstCol = Math.max( 0, firstCol );\n    var lastCol = Math.floor( lastX / this.columnWidth );\n    // lastCol should not go over if multiple of columnWidth #425\n    lastCol -= lastX % this.columnWidth ? 0 : 1;\n    lastCol = Math.min( this.cols - 1, lastCol );\n    // set colYs to bottom of the stamp\n\n    var isOriginTop = this._getOption('originTop');\n    var stampMaxY = ( isOriginTop ? offset.top : offset.bottom ) +\n      stampSize.outerHeight;\n    for ( var i = firstCol; i <= lastCol; i++ ) {\n      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );\n    }\n  };\n\n  proto._getContainerSize = function() {\n    this.maxY = Math.max.apply( Math, this.colYs );\n    var size = {\n      height: this.maxY\n    };\n\n    if ( this._getOption('fitWidth') ) {\n      size.width = this._getContainerFitWidth();\n    }\n\n    return size;\n  };\n\n  proto._getContainerFitWidth = function() {\n    var unusedCols = 0;\n    // count unused columns\n    var i = this.cols;\n    while ( --i ) {\n      if ( this.colYs[i] !== 0 ) {\n        break;\n      }\n      unusedCols++;\n    }\n    // fit container to columns that have been used\n    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;\n  };\n\n  proto.needsResizeLayout = function() {\n    var previousWidth = this.containerWidth;\n    this.getContainerWidth();\n    return previousWidth != this.containerWidth;\n  };\n\n  return Masonry;\n\n}));\n\n},{\"get-size\":5,\"outlayer\":11}],9:[function(require,module,exports){\n/**\n * Outlayer Item\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD - RequireJS\n    define( [\n        'ev-emitter/ev-emitter',\n        'get-size/get-size'\n      ],\n      factory\n    );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(\n      require('ev-emitter'),\n      require('get-size')\n    );\n  } else {\n    // browser global\n    window.Outlayer = {};\n    window.Outlayer.Item = factory(\n      window.EvEmitter,\n      window.getSize\n    );\n  }\n\n}( window, function factory( EvEmitter, getSize ) {\n'use strict';\n\n// ----- helpers ----- //\n\nfunction isEmptyObj( obj ) {\n  for ( var prop in obj ) {\n    return false;\n  }\n  prop = null;\n  return true;\n}\n\n// -------------------------- CSS3 support -------------------------- //\n\n\nvar docElemStyle = document.documentElement.style;\n\nvar transitionProperty = typeof docElemStyle.transition == 'string' ?\n  'transition' : 'WebkitTransition';\nvar transformProperty = typeof docElemStyle.transform == 'string' ?\n  'transform' : 'WebkitTransform';\n\nvar transitionEndEvent = {\n  WebkitTransition: 'webkitTransitionEnd',\n  transition: 'transitionend'\n}[ transitionProperty ];\n\n// cache all vendor properties that could have vendor prefix\nvar vendorProperties = {\n  transform: transformProperty,\n  transition: transitionProperty,\n  transitionDuration: transitionProperty + 'Duration',\n  transitionProperty: transitionProperty + 'Property',\n  transitionDelay: transitionProperty + 'Delay'\n};\n\n// -------------------------- Item -------------------------- //\n\nfunction Item( element, layout ) {\n  if ( !element ) {\n    return;\n  }\n\n  this.element = element;\n  // parent layout class, i.e. Masonry, Isotope, or Packery\n  this.layout = layout;\n  this.position = {\n    x: 0,\n    y: 0\n  };\n\n  this._create();\n}\n\n// inherit EvEmitter\nvar proto = Item.prototype = Object.create( EvEmitter.prototype );\nproto.constructor = Item;\n\nproto._create = function() {\n  // transition objects\n  this._transn = {\n    ingProperties: {},\n    clean: {},\n    onEnd: {}\n  };\n\n  this.css({\n    position: 'absolute'\n  });\n};\n\n// trigger specified handler for event type\nproto.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\n/**\n * apply CSS styles to element\n * @param {Object} style\n */\nproto.css = function( style ) {\n  var elemStyle = this.element.style;\n\n  for ( var prop in style ) {\n    // use vendor property if available\n    var supportedProp = vendorProperties[ prop ] || prop;\n    elemStyle[ supportedProp ] = style[ prop ];\n  }\n};\n\n // measure position, and sets it\nproto.getPosition = function() {\n  var style = getComputedStyle( this.element );\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n  var xValue = style[ isOriginLeft ? 'left' : 'right' ];\n  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];\n  var x = parseFloat( xValue );\n  var y = parseFloat( yValue );\n  // convert percent to pixels\n  var layoutSize = this.layout.size;\n  if ( xValue.indexOf('%') != -1 ) {\n    x = ( x / 100 ) * layoutSize.width;\n  }\n  if ( yValue.indexOf('%') != -1 ) {\n    y = ( y / 100 ) * layoutSize.height;\n  }\n  // clean up 'auto' or other non-integer values\n  x = isNaN( x ) ? 0 : x;\n  y = isNaN( y ) ? 0 : y;\n  // remove padding from measurement\n  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;\n  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;\n\n  this.position.x = x;\n  this.position.y = y;\n};\n\n// set settled position, apply padding\nproto.layoutPosition = function() {\n  var layoutSize = this.layout.size;\n  var style = {};\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n\n  // x\n  var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';\n  var xProperty = isOriginLeft ? 'left' : 'right';\n  var xResetProperty = isOriginLeft ? 'right' : 'left';\n\n  var x = this.position.x + layoutSize[ xPadding ];\n  // set in percentage or pixels\n  style[ xProperty ] = this.getXValue( x );\n  // reset other property\n  style[ xResetProperty ] = '';\n\n  // y\n  var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';\n  var yProperty = isOriginTop ? 'top' : 'bottom';\n  var yResetProperty = isOriginTop ? 'bottom' : 'top';\n\n  var y = this.position.y + layoutSize[ yPadding ];\n  // set in percentage or pixels\n  style[ yProperty ] = this.getYValue( y );\n  // reset other property\n  style[ yResetProperty ] = '';\n\n  this.css( style );\n  this.emitEvent( 'layout', [ this ] );\n};\n\nproto.getXValue = function( x ) {\n  var isHorizontal = this.layout._getOption('horizontal');\n  return this.layout.options.percentPosition && !isHorizontal ?\n    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';\n};\n\nproto.getYValue = function( y ) {\n  var isHorizontal = this.layout._getOption('horizontal');\n  return this.layout.options.percentPosition && isHorizontal ?\n    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';\n};\n\nproto._transitionTo = function( x, y ) {\n  this.getPosition();\n  // get current x & y from top/left\n  var curX = this.position.x;\n  var curY = this.position.y;\n\n  var didNotMove = x == this.position.x && y == this.position.y;\n\n  // save end position\n  this.setPosition( x, y );\n\n  // if did not move and not transitioning, just go to layout\n  if ( didNotMove && !this.isTransitioning ) {\n    this.layoutPosition();\n    return;\n  }\n\n  var transX = x - curX;\n  var transY = y - curY;\n  var transitionStyle = {};\n  transitionStyle.transform = this.getTranslate( transX, transY );\n\n  this.transition({\n    to: transitionStyle,\n    onTransitionEnd: {\n      transform: this.layoutPosition\n    },\n    isCleaning: true\n  });\n};\n\nproto.getTranslate = function( x, y ) {\n  // flip cooridinates if origin on right or bottom\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n  x = isOriginLeft ? x : -x;\n  y = isOriginTop ? y : -y;\n  return 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n};\n\n// non transition + transform support\nproto.goTo = function( x, y ) {\n  this.setPosition( x, y );\n  this.layoutPosition();\n};\n\nproto.moveTo = proto._transitionTo;\n\nproto.setPosition = function( x, y ) {\n  this.position.x = parseFloat( x );\n  this.position.y = parseFloat( y );\n};\n\n// ----- transition ----- //\n\n/**\n * @param {Object} style - CSS\n * @param {Function} onTransitionEnd\n */\n\n// non transition, just trigger callback\nproto._nonTransition = function( args ) {\n  this.css( args.to );\n  if ( args.isCleaning ) {\n    this._removeStyles( args.to );\n  }\n  for ( var prop in args.onTransitionEnd ) {\n    args.onTransitionEnd[ prop ].call( this );\n  }\n};\n\n/**\n * proper transition\n * @param {Object} args - arguments\n *   @param {Object} to - style to transition to\n *   @param {Object} from - style to start transition from\n *   @param {Boolean} isCleaning - removes transition styles after transition\n *   @param {Function} onTransitionEnd - callback\n */\nproto.transition = function( args ) {\n  // redirect to nonTransition if no transition duration\n  if ( !parseFloat( this.layout.options.transitionDuration ) ) {\n    this._nonTransition( args );\n    return;\n  }\n\n  var _transition = this._transn;\n  // keep track of onTransitionEnd callback by css property\n  for ( var prop in args.onTransitionEnd ) {\n    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];\n  }\n  // keep track of properties that are transitioning\n  for ( prop in args.to ) {\n    _transition.ingProperties[ prop ] = true;\n    // keep track of properties to clean up when transition is done\n    if ( args.isCleaning ) {\n      _transition.clean[ prop ] = true;\n    }\n  }\n\n  // set from styles\n  if ( args.from ) {\n    this.css( args.from );\n    // force redraw. http://blog.alexmaccaw.com/css-transitions\n    var h = this.element.offsetHeight;\n    // hack for JSHint to hush about unused var\n    h = null;\n  }\n  // enable transition\n  this.enableTransition( args.to );\n  // set styles that are transitioning\n  this.css( args.to );\n\n  this.isTransitioning = true;\n\n};\n\n// dash before all cap letters, including first for\n// WebkitTransform => -webkit-transform\nfunction toDashedAll( str ) {\n  return str.replace( /([A-Z])/g, function( $1 ) {\n    return '-' + $1.toLowerCase();\n  });\n}\n\nvar transitionProps = 'opacity,' + toDashedAll( transformProperty );\n\nproto.enableTransition = function(/* style */) {\n  // HACK changing transitionProperty during a transition\n  // will cause transition to jump\n  if ( this.isTransitioning ) {\n    return;\n  }\n\n  // make `transition: foo, bar, baz` from style object\n  // HACK un-comment this when enableTransition can work\n  // while a transition is happening\n  // var transitionValues = [];\n  // for ( var prop in style ) {\n  //   // dash-ify camelCased properties like WebkitTransition\n  //   prop = vendorProperties[ prop ] || prop;\n  //   transitionValues.push( toDashedAll( prop ) );\n  // }\n  // munge number to millisecond, to match stagger\n  var duration = this.layout.options.transitionDuration;\n  duration = typeof duration == 'number' ? duration + 'ms' : duration;\n  // enable transition styles\n  this.css({\n    transitionProperty: transitionProps,\n    transitionDuration: duration,\n    transitionDelay: this.staggerDelay || 0\n  });\n  // listen for transition end event\n  this.element.addEventListener( transitionEndEvent, this, false );\n};\n\n// ----- events ----- //\n\nproto.onwebkitTransitionEnd = function( event ) {\n  this.ontransitionend( event );\n};\n\nproto.onotransitionend = function( event ) {\n  this.ontransitionend( event );\n};\n\n// properties that I munge to make my life easier\nvar dashedVendorProperties = {\n  '-webkit-transform': 'transform'\n};\n\nproto.ontransitionend = function( event ) {\n  // disregard bubbled events from children\n  if ( event.target !== this.element ) {\n    return;\n  }\n  var _transition = this._transn;\n  // get property name of transitioned property, convert to prefix-free\n  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;\n\n  // remove property that has completed transitioning\n  delete _transition.ingProperties[ propertyName ];\n  // check if any properties are still transitioning\n  if ( isEmptyObj( _transition.ingProperties ) ) {\n    // all properties have completed transitioning\n    this.disableTransition();\n  }\n  // clean style\n  if ( propertyName in _transition.clean ) {\n    // clean up style\n    this.element.style[ event.propertyName ] = '';\n    delete _transition.clean[ propertyName ];\n  }\n  // trigger onTransitionEnd callback\n  if ( propertyName in _transition.onEnd ) {\n    var onTransitionEnd = _transition.onEnd[ propertyName ];\n    onTransitionEnd.call( this );\n    delete _transition.onEnd[ propertyName ];\n  }\n\n  this.emitEvent( 'transitionEnd', [ this ] );\n};\n\nproto.disableTransition = function() {\n  this.removeTransitionStyles();\n  this.element.removeEventListener( transitionEndEvent, this, false );\n  this.isTransitioning = false;\n};\n\n/**\n * removes style property from element\n * @param {Object} style\n**/\nproto._removeStyles = function( style ) {\n  // clean up transition styles\n  var cleanStyle = {};\n  for ( var prop in style ) {\n    cleanStyle[ prop ] = '';\n  }\n  this.css( cleanStyle );\n};\n\nvar cleanTransitionStyle = {\n  transitionProperty: '',\n  transitionDuration: '',\n  transitionDelay: ''\n};\n\nproto.removeTransitionStyles = function() {\n  // remove transition\n  this.css( cleanTransitionStyle );\n};\n\n// ----- stagger ----- //\n\nproto.stagger = function( delay ) {\n  delay = isNaN( delay ) ? 0 : delay;\n  this.staggerDelay = delay + 'ms';\n};\n\n// ----- show/hide/remove ----- //\n\n// remove element from DOM\nproto.removeElem = function() {\n  this.element.parentNode.removeChild( this.element );\n  // remove display: none\n  this.css({ display: '' });\n  this.emitEvent( 'remove', [ this ] );\n};\n\nproto.remove = function() {\n  // just remove element if no transition support or no transition\n  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {\n    this.removeElem();\n    return;\n  }\n\n  // start transition\n  this.once( 'transitionEnd', function() {\n    this.removeElem();\n  });\n  this.hide();\n};\n\nproto.reveal = function() {\n  delete this.isHidden;\n  // remove display: none\n  this.css({ display: '' });\n\n  var options = this.layout.options;\n\n  var onTransitionEnd = {};\n  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');\n  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;\n\n  this.transition({\n    from: options.hiddenStyle,\n    to: options.visibleStyle,\n    isCleaning: true,\n    onTransitionEnd: onTransitionEnd\n  });\n};\n\nproto.onRevealTransitionEnd = function() {\n  // check if still visible\n  // during transition, item may have been hidden\n  if ( !this.isHidden ) {\n    this.emitEvent('reveal');\n  }\n};\n\n/**\n * get style property use for hide/reveal transition end\n * @param {String} styleProperty - hiddenStyle/visibleStyle\n * @returns {String}\n */\nproto.getHideRevealTransitionEndProperty = function( styleProperty ) {\n  var optionStyle = this.layout.options[ styleProperty ];\n  // use opacity\n  if ( optionStyle.opacity ) {\n    return 'opacity';\n  }\n  // get first property\n  for ( var prop in optionStyle ) {\n    return prop;\n  }\n};\n\nproto.hide = function() {\n  // set flag\n  this.isHidden = true;\n  // remove display: none\n  this.css({ display: '' });\n\n  var options = this.layout.options;\n\n  var onTransitionEnd = {};\n  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');\n  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;\n\n  this.transition({\n    from: options.visibleStyle,\n    to: options.hiddenStyle,\n    // keep hidden stuff hidden\n    isCleaning: true,\n    onTransitionEnd: onTransitionEnd\n  });\n};\n\nproto.onHideTransitionEnd = function() {\n  // check if still hidden\n  // during transition, item may have been un-hidden\n  if ( this.isHidden ) {\n    this.css({ display: 'none' });\n    this.emitEvent('hide');\n  }\n};\n\nproto.destroy = function() {\n  this.css({\n    position: '',\n    left: '',\n    right: '',\n    top: '',\n    bottom: '',\n    transition: '',\n    transform: ''\n  });\n};\n\nreturn Item;\n\n}));\n\n},{\"ev-emitter\":10,\"get-size\":5}],10:[function(require,module,exports){\n/**\n * EvEmitter v1.1.0\n * Lil' event emitter\n * MIT License\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n( function( global, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, window */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD - RequireJS\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n\n}( typeof window != 'undefined' ? window : this, function() {\n\n\"use strict\";\n\nfunction EvEmitter() {}\n\nvar proto = EvEmitter.prototype;\n\nproto.on = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // set events hash\n  var events = this._events = this._events || {};\n  // set listeners array\n  var listeners = events[ eventName ] = events[ eventName ] || [];\n  // only add once\n  if ( listeners.indexOf( listener ) == -1 ) {\n    listeners.push( listener );\n  }\n\n  return this;\n};\n\nproto.once = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // add event\n  this.on( eventName, listener );\n  // set once flag\n  // set onceEvents hash\n  var onceEvents = this._onceEvents = this._onceEvents || {};\n  // set onceListeners object\n  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};\n  // set flag\n  onceListeners[ listener ] = true;\n\n  return this;\n};\n\nproto.off = function( eventName, listener ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  var index = listeners.indexOf( listener );\n  if ( index != -1 ) {\n    listeners.splice( index, 1 );\n  }\n\n  return this;\n};\n\nproto.emitEvent = function( eventName, args ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  // copy over to avoid interference if .off() in listener\n  listeners = listeners.slice(0);\n  args = args || [];\n  // once stuff\n  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];\n\n  for ( var i=0; i < listeners.length; i++ ) {\n    var listener = listeners[i]\n    var isOnce = onceListeners && onceListeners[ listener ];\n    if ( isOnce ) {\n      // remove listener\n      // remove before trigger to prevent recursion\n      this.off( eventName, listener );\n      // unset once flag\n      delete onceListeners[ listener ];\n    }\n    // trigger listener\n    listener.apply( this, args );\n  }\n\n  return this;\n};\n\nproto.allOff = function() {\n  delete this._events;\n  delete this._onceEvents;\n};\n\nreturn EvEmitter;\n\n}));\n\n},{}],11:[function(require,module,exports){\n/*!\n * Outlayer v2.1.1\n * the brains and guts of a layout library\n * MIT license\n */\n\n( function( window, factory ) {\n  'use strict';\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD - RequireJS\n    define( [\n        'ev-emitter/ev-emitter',\n        'get-size/get-size',\n        'fizzy-ui-utils/utils',\n        './item'\n      ],\n      function( EvEmitter, getSize, utils, Item ) {\n        return factory( window, EvEmitter, getSize, utils, Item);\n      }\n    );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(\n      window,\n      require('ev-emitter'),\n      require('get-size'),\n      require('fizzy-ui-utils'),\n      require('./item')\n    );\n  } else {\n    // browser global\n    window.Outlayer = factory(\n      window,\n      window.EvEmitter,\n      window.getSize,\n      window.fizzyUIUtils,\n      window.Outlayer.Item\n    );\n  }\n\n}( window, function factory( window, EvEmitter, getSize, utils, Item ) {\n'use strict';\n\n// ----- vars ----- //\n\nvar console = window.console;\nvar jQuery = window.jQuery;\nvar noop = function() {};\n\n// -------------------------- Outlayer -------------------------- //\n\n// globally unique identifiers\nvar GUID = 0;\n// internal store of all Outlayer intances\nvar instances = {};\n\n\n/**\n * @param {Element, String} element\n * @param {Object} options\n * @constructor\n */\nfunction Outlayer( element, options ) {\n  var queryElement = utils.getQueryElement( element );\n  if ( !queryElement ) {\n    if ( console ) {\n      console.error( 'Bad element for ' + this.constructor.namespace +\n        ': ' + ( queryElement || element ) );\n    }\n    return;\n  }\n  this.element = queryElement;\n  // add jQuery\n  if ( jQuery ) {\n    this.$element = jQuery( this.element );\n  }\n\n  // options\n  this.options = utils.extend( {}, this.constructor.defaults );\n  this.option( options );\n\n  // add id for Outlayer.getFromElement\n  var id = ++GUID;\n  this.element.outlayerGUID = id; // expando\n  instances[ id ] = this; // associate via id\n\n  // kick it off\n  this._create();\n\n  var isInitLayout = this._getOption('initLayout');\n  if ( isInitLayout ) {\n    this.layout();\n  }\n}\n\n// settings are for internal use only\nOutlayer.namespace = 'outlayer';\nOutlayer.Item = Item;\n\n// default options\nOutlayer.defaults = {\n  containerStyle: {\n    position: 'relative'\n  },\n  initLayout: true,\n  originLeft: true,\n  originTop: true,\n  resize: true,\n  resizeContainer: true,\n  // item options\n  transitionDuration: '0.4s',\n  hiddenStyle: {\n    opacity: 0,\n    transform: 'scale(0.001)'\n  },\n  visibleStyle: {\n    opacity: 1,\n    transform: 'scale(1)'\n  }\n};\n\nvar proto = Outlayer.prototype;\n// inherit EvEmitter\nutils.extend( proto, EvEmitter.prototype );\n\n/**\n * set options\n * @param {Object} opts\n */\nproto.option = function( opts ) {\n  utils.extend( this.options, opts );\n};\n\n/**\n * get backwards compatible option value, check old name\n */\nproto._getOption = function( option ) {\n  var oldOption = this.constructor.compatOptions[ option ];\n  return oldOption && this.options[ oldOption ] !== undefined ?\n    this.options[ oldOption ] : this.options[ option ];\n};\n\nOutlayer.compatOptions = {\n  // currentName: oldName\n  initLayout: 'isInitLayout',\n  horizontal: 'isHorizontal',\n  layoutInstant: 'isLayoutInstant',\n  originLeft: 'isOriginLeft',\n  originTop: 'isOriginTop',\n  resize: 'isResizeBound',\n  resizeContainer: 'isResizingContainer'\n};\n\nproto._create = function() {\n  // get items from children\n  this.reloadItems();\n  // elements that affect layout, but are not laid out\n  this.stamps = [];\n  this.stamp( this.options.stamp );\n  // set container style\n  utils.extend( this.element.style, this.options.containerStyle );\n\n  // bind resize method\n  var canBindResize = this._getOption('resize');\n  if ( canBindResize ) {\n    this.bindResize();\n  }\n};\n\n// goes through all children again and gets bricks in proper order\nproto.reloadItems = function() {\n  // collection of item elements\n  this.items = this._itemize( this.element.children );\n};\n\n\n/**\n * turn elements into Outlayer.Items to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - collection of new Outlayer Items\n */\nproto._itemize = function( elems ) {\n\n  var itemElems = this._filterFindItemElements( elems );\n  var Item = this.constructor.Item;\n\n  // create new Outlayer Items for collection\n  var items = [];\n  for ( var i=0; i < itemElems.length; i++ ) {\n    var elem = itemElems[i];\n    var item = new Item( elem, this );\n    items.push( item );\n  }\n\n  return items;\n};\n\n/**\n * get item elements to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - item elements\n */\nproto._filterFindItemElements = function( elems ) {\n  return utils.filterFindElements( elems, this.options.itemSelector );\n};\n\n/**\n * getter method for getting item elements\n * @returns {Array} elems - collection of item elements\n */\nproto.getItemElements = function() {\n  return this.items.map( function( item ) {\n    return item.element;\n  });\n};\n\n// ----- init & layout ----- //\n\n/**\n * lays out all items\n */\nproto.layout = function() {\n  this._resetLayout();\n  this._manageStamps();\n\n  // don't animate first layout\n  var layoutInstant = this._getOption('layoutInstant');\n  var isInstant = layoutInstant !== undefined ?\n    layoutInstant : !this._isLayoutInited;\n  this.layoutItems( this.items, isInstant );\n\n  // flag for initalized\n  this._isLayoutInited = true;\n};\n\n// _init is alias for layout\nproto._init = proto.layout;\n\n/**\n * logic before any new layout\n */\nproto._resetLayout = function() {\n  this.getSize();\n};\n\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\n/**\n * get measurement from option, for columnWidth, rowHeight, gutter\n * if option is String -> get element from selector string, & get size of element\n * if option is Element -> get size of element\n * else use option as a number\n *\n * @param {String} measurement\n * @param {String} size - width or height\n * @private\n */\nproto._getMeasurement = function( measurement, size ) {\n  var option = this.options[ measurement ];\n  var elem;\n  if ( !option ) {\n    // default to 0\n    this[ measurement ] = 0;\n  } else {\n    // use option as an element\n    if ( typeof option == 'string' ) {\n      elem = this.element.querySelector( option );\n    } else if ( option instanceof HTMLElement ) {\n      elem = option;\n    }\n    // use size of element, if element\n    this[ measurement ] = elem ? getSize( elem )[ size ] : option;\n  }\n};\n\n/**\n * layout a collection of item elements\n * @api public\n */\nproto.layoutItems = function( items, isInstant ) {\n  items = this._getItemsForLayout( items );\n\n  this._layoutItems( items, isInstant );\n\n  this._postLayout();\n};\n\n/**\n * get the items to be laid out\n * you may want to skip over some items\n * @param {Array} items\n * @returns {Array} items\n */\nproto._getItemsForLayout = function( items ) {\n  return items.filter( function( item ) {\n    return !item.isIgnored;\n  });\n};\n\n/**\n * layout items\n * @param {Array} items\n * @param {Boolean} isInstant\n */\nproto._layoutItems = function( items, isInstant ) {\n  this._emitCompleteOnItems( 'layout', items );\n\n  if ( !items || !items.length ) {\n    // no items, emit event with empty array\n    return;\n  }\n\n  var queue = [];\n\n  items.forEach( function( item ) {\n    // get x/y object from method\n    var position = this._getItemLayoutPosition( item );\n    // enqueue\n    position.item = item;\n    position.isInstant = isInstant || item.isLayoutInstant;\n    queue.push( position );\n  }, this );\n\n  this._processLayoutQueue( queue );\n};\n\n/**\n * get item layout position\n * @param {Outlayer.Item} item\n * @returns {Object} x and y position\n */\nproto._getItemLayoutPosition = function( /* item */ ) {\n  return {\n    x: 0,\n    y: 0\n  };\n};\n\n/**\n * iterate over array and position each item\n * Reason being - separating this logic prevents 'layout invalidation'\n * thx @paul_irish\n * @param {Array} queue\n */\nproto._processLayoutQueue = function( queue ) {\n  this.updateStagger();\n  queue.forEach( function( obj, i ) {\n    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant, i );\n  }, this );\n};\n\n// set stagger from option in milliseconds number\nproto.updateStagger = function() {\n  var stagger = this.options.stagger;\n  if ( stagger === null || stagger === undefined ) {\n    this.stagger = 0;\n    return;\n  }\n  this.stagger = getMilliseconds( stagger );\n  return this.stagger;\n};\n\n/**\n * Sets position of item in DOM\n * @param {Outlayer.Item} item\n * @param {Number} x - horizontal position\n * @param {Number} y - vertical position\n * @param {Boolean} isInstant - disables transitions\n */\nproto._positionItem = function( item, x, y, isInstant, i ) {\n  if ( isInstant ) {\n    // if not transition, just set CSS\n    item.goTo( x, y );\n  } else {\n    item.stagger( i * this.stagger );\n    item.moveTo( x, y );\n  }\n};\n\n/**\n * Any logic you want to do after each layout,\n * i.e. size the container\n */\nproto._postLayout = function() {\n  this.resizeContainer();\n};\n\nproto.resizeContainer = function() {\n  var isResizingContainer = this._getOption('resizeContainer');\n  if ( !isResizingContainer ) {\n    return;\n  }\n  var size = this._getContainerSize();\n  if ( size ) {\n    this._setContainerMeasure( size.width, true );\n    this._setContainerMeasure( size.height, false );\n  }\n};\n\n/**\n * Sets width or height of container if returned\n * @returns {Object} size\n *   @param {Number} width\n *   @param {Number} height\n */\nproto._getContainerSize = noop;\n\n/**\n * @param {Number} measure - size of width or height\n * @param {Boolean} isWidth\n */\nproto._setContainerMeasure = function( measure, isWidth ) {\n  if ( measure === undefined ) {\n    return;\n  }\n\n  var elemSize = this.size;\n  // add padding and border width if border box\n  if ( elemSize.isBorderBox ) {\n    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +\n      elemSize.borderLeftWidth + elemSize.borderRightWidth :\n      elemSize.paddingBottom + elemSize.paddingTop +\n      elemSize.borderTopWidth + elemSize.borderBottomWidth;\n  }\n\n  measure = Math.max( measure, 0 );\n  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';\n};\n\n/**\n * emit eventComplete on a collection of items events\n * @param {String} eventName\n * @param {Array} items - Outlayer.Items\n */\nproto._emitCompleteOnItems = function( eventName, items ) {\n  var _this = this;\n  function onComplete() {\n    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );\n  }\n\n  var count = items.length;\n  if ( !items || !count ) {\n    onComplete();\n    return;\n  }\n\n  var doneCount = 0;\n  function tick() {\n    doneCount++;\n    if ( doneCount == count ) {\n      onComplete();\n    }\n  }\n\n  // bind callback\n  items.forEach( function( item ) {\n    item.once( eventName, tick );\n  });\n};\n\n/**\n * emits events via EvEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */\nproto.dispatchEvent = function( type, event, args ) {\n  // add original event to arguments\n  var emitArgs = event ? [ event ].concat( args ) : args;\n  this.emitEvent( type, emitArgs );\n\n  if ( jQuery ) {\n    // set this.$element\n    this.$element = this.$element || jQuery( this.element );\n    if ( event ) {\n      // create jQuery event\n      var $event = jQuery.Event( event );\n      $event.type = type;\n      this.$element.trigger( $event, args );\n    } else {\n      // just trigger with type if no event available\n      this.$element.trigger( type, args );\n    }\n  }\n};\n\n// -------------------------- ignore & stamps -------------------------- //\n\n\n/**\n * keep item in collection, but do not lay it out\n * ignored items do not get skipped in layout\n * @param {Element} elem\n */\nproto.ignore = function( elem ) {\n  var item = this.getItem( elem );\n  if ( item ) {\n    item.isIgnored = true;\n  }\n};\n\n/**\n * return item to layout collection\n * @param {Element} elem\n */\nproto.unignore = function( elem ) {\n  var item = this.getItem( elem );\n  if ( item ) {\n    delete item.isIgnored;\n  }\n};\n\n/**\n * adds elements to stamps\n * @param {NodeList, Array, Element, or String} elems\n */\nproto.stamp = function( elems ) {\n  elems = this._find( elems );\n  if ( !elems ) {\n    return;\n  }\n\n  this.stamps = this.stamps.concat( elems );\n  // ignore\n  elems.forEach( this.ignore, this );\n};\n\n/**\n * removes elements to stamps\n * @param {NodeList, Array, or Element} elems\n */\nproto.unstamp = function( elems ) {\n  elems = this._find( elems );\n  if ( !elems ){\n    return;\n  }\n\n  elems.forEach( function( elem ) {\n    // filter out removed stamp elements\n    utils.removeFrom( this.stamps, elem );\n    this.unignore( elem );\n  }, this );\n};\n\n/**\n * finds child elements\n * @param {NodeList, Array, Element, or String} elems\n * @returns {Array} elems\n */\nproto._find = function( elems ) {\n  if ( !elems ) {\n    return;\n  }\n  // if string, use argument as selector string\n  if ( typeof elems == 'string' ) {\n    elems = this.element.querySelectorAll( elems );\n  }\n  elems = utils.makeArray( elems );\n  return elems;\n};\n\nproto._manageStamps = function() {\n  if ( !this.stamps || !this.stamps.length ) {\n    return;\n  }\n\n  this._getBoundingRect();\n\n  this.stamps.forEach( this._manageStamp, this );\n};\n\n// update boundingLeft / Top\nproto._getBoundingRect = function() {\n  // get bounding rect for container element\n  var boundingRect = this.element.getBoundingClientRect();\n  var size = this.size;\n  this._boundingRect = {\n    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,\n    top: boundingRect.top + size.paddingTop + size.borderTopWidth,\n    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),\n    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )\n  };\n};\n\n/**\n * @param {Element} stamp\n**/\nproto._manageStamp = noop;\n\n/**\n * get x/y position of element relative to container element\n * @param {Element} elem\n * @returns {Object} offset - has left, top, right, bottom\n */\nproto._getElementOffset = function( elem ) {\n  var boundingRect = elem.getBoundingClientRect();\n  var thisRect = this._boundingRect;\n  var size = getSize( elem );\n  var offset = {\n    left: boundingRect.left - thisRect.left - size.marginLeft,\n    top: boundingRect.top - thisRect.top - size.marginTop,\n    right: thisRect.right - boundingRect.right - size.marginRight,\n    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom\n  };\n  return offset;\n};\n\n// -------------------------- resize -------------------------- //\n\n// enable event handlers for listeners\n// i.e. resize -> onresize\nproto.handleEvent = utils.handleEvent;\n\n/**\n * Bind layout to window resizing\n */\nproto.bindResize = function() {\n  window.addEventListener( 'resize', this );\n  this.isResizeBound = true;\n};\n\n/**\n * Unbind layout to window resizing\n */\nproto.unbindResize = function() {\n  window.removeEventListener( 'resize', this );\n  this.isResizeBound = false;\n};\n\nproto.onresize = function() {\n  this.resize();\n};\n\nutils.debounceMethod( Outlayer, 'onresize', 100 );\n\nproto.resize = function() {\n  // don't trigger if size did not change\n  // or if resize was unbound. See #9\n  if ( !this.isResizeBound || !this.needsResizeLayout() ) {\n    return;\n  }\n\n  this.layout();\n};\n\n/**\n * check if layout is needed post layout\n * @returns Boolean\n */\nproto.needsResizeLayout = function() {\n  var size = getSize( this.element );\n  // check that this.size and size are there\n  // IE8 triggers resize on body size change, so they might not be\n  var hasSizes = this.size && size;\n  return hasSizes && size.innerWidth !== this.size.innerWidth;\n};\n\n// -------------------------- methods -------------------------- //\n\n/**\n * add items to Outlayer instance\n * @param {Array or NodeList or Element} elems\n * @returns {Array} items - Outlayer.Items\n**/\nproto.addItems = function( elems ) {\n  var items = this._itemize( elems );\n  // add items to collection\n  if ( items.length ) {\n    this.items = this.items.concat( items );\n  }\n  return items;\n};\n\n/**\n * Layout newly-appended item elements\n * @param {Array or NodeList or Element} elems\n */\nproto.appended = function( elems ) {\n  var items = this.addItems( elems );\n  if ( !items.length ) {\n    return;\n  }\n  // layout and reveal just the new items\n  this.layoutItems( items, true );\n  this.reveal( items );\n};\n\n/**\n * Layout prepended elements\n * @param {Array or NodeList or Element} elems\n */\nproto.prepended = function( elems ) {\n  var items = this._itemize( elems );\n  if ( !items.length ) {\n    return;\n  }\n  // add items to beginning of collection\n  var previousItems = this.items.slice(0);\n  this.items = items.concat( previousItems );\n  // start new layout\n  this._resetLayout();\n  this._manageStamps();\n  // layout new stuff without transition\n  this.layoutItems( items, true );\n  this.reveal( items );\n  // layout previous items\n  this.layoutItems( previousItems );\n};\n\n/**\n * reveal a collection of items\n * @param {Array of Outlayer.Items} items\n */\nproto.reveal = function( items ) {\n  this._emitCompleteOnItems( 'reveal', items );\n  if ( !items || !items.length ) {\n    return;\n  }\n  var stagger = this.updateStagger();\n  items.forEach( function( item, i ) {\n    item.stagger( i * stagger );\n    item.reveal();\n  });\n};\n\n/**\n * hide a collection of items\n * @param {Array of Outlayer.Items} items\n */\nproto.hide = function( items ) {\n  this._emitCompleteOnItems( 'hide', items );\n  if ( !items || !items.length ) {\n    return;\n  }\n  var stagger = this.updateStagger();\n  items.forEach( function( item, i ) {\n    item.stagger( i * stagger );\n    item.hide();\n  });\n};\n\n/**\n * reveal item elements\n * @param {Array}, {Element}, {NodeList} items\n */\nproto.revealItemElements = function( elems ) {\n  var items = this.getItems( elems );\n  this.reveal( items );\n};\n\n/**\n * hide item elements\n * @param {Array}, {Element}, {NodeList} items\n */\nproto.hideItemElements = function( elems ) {\n  var items = this.getItems( elems );\n  this.hide( items );\n};\n\n/**\n * get Outlayer.Item, given an Element\n * @param {Element} elem\n * @param {Function} callback\n * @returns {Outlayer.Item} item\n */\nproto.getItem = function( elem ) {\n  // loop through items to get the one that matches\n  for ( var i=0; i < this.items.length; i++ ) {\n    var item = this.items[i];\n    if ( item.element == elem ) {\n      // return item\n      return item;\n    }\n  }\n};\n\n/**\n * get collection of Outlayer.Items, given Elements\n * @param {Array} elems\n * @returns {Array} items - Outlayer.Items\n */\nproto.getItems = function( elems ) {\n  elems = utils.makeArray( elems );\n  var items = [];\n  elems.forEach( function( elem ) {\n    var item = this.getItem( elem );\n    if ( item ) {\n      items.push( item );\n    }\n  }, this );\n\n  return items;\n};\n\n/**\n * remove element(s) from instance and DOM\n * @param {Array or NodeList or Element} elems\n */\nproto.remove = function( elems ) {\n  var removeItems = this.getItems( elems );\n\n  this._emitCompleteOnItems( 'remove', removeItems );\n\n  // bail if no items to remove\n  if ( !removeItems || !removeItems.length ) {\n    return;\n  }\n\n  removeItems.forEach( function( item ) {\n    item.remove();\n    // remove item from collection\n    utils.removeFrom( this.items, item );\n  }, this );\n};\n\n// ----- destroy ----- //\n\n// remove and disable Outlayer instance\nproto.destroy = function() {\n  // clean up dynamic styles\n  var style = this.element.style;\n  style.height = '';\n  style.position = '';\n  style.width = '';\n  // destroy items\n  this.items.forEach( function( item ) {\n    item.destroy();\n  });\n\n  this.unbindResize();\n\n  var id = this.element.outlayerGUID;\n  delete instances[ id ]; // remove reference to instance by id\n  delete this.element.outlayerGUID;\n  // remove data for jQuery\n  if ( jQuery ) {\n    jQuery.removeData( this.element, this.constructor.namespace );\n  }\n\n};\n\n// -------------------------- data -------------------------- //\n\n/**\n * get Outlayer instance from element\n * @param {Element} elem\n * @returns {Outlayer}\n */\nOutlayer.data = function( elem ) {\n  elem = utils.getQueryElement( elem );\n  var id = elem && elem.outlayerGUID;\n  return id && instances[ id ];\n};\n\n\n// -------------------------- create Outlayer class -------------------------- //\n\n/**\n * create a layout class\n * @param {String} namespace\n */\nOutlayer.create = function( namespace, options ) {\n  // sub-class Outlayer\n  var Layout = subclass( Outlayer );\n  // apply new options and compatOptions\n  Layout.defaults = utils.extend( {}, Outlayer.defaults );\n  utils.extend( Layout.defaults, options );\n  Layout.compatOptions = utils.extend( {}, Outlayer.compatOptions  );\n\n  Layout.namespace = namespace;\n\n  Layout.data = Outlayer.data;\n\n  // sub-class Item\n  Layout.Item = subclass( Item );\n\n  // -------------------------- declarative -------------------------- //\n\n  utils.htmlInit( Layout, namespace );\n\n  // -------------------------- jQuery bridge -------------------------- //\n\n  // make into jQuery plugin\n  if ( jQuery && jQuery.bridget ) {\n    jQuery.bridget( namespace, Layout );\n  }\n\n  return Layout;\n};\n\nfunction subclass( Parent ) {\n  function SubClass() {\n    Parent.apply( this, arguments );\n  }\n\n  SubClass.prototype = Object.create( Parent.prototype );\n  SubClass.prototype.constructor = SubClass;\n\n  return SubClass;\n}\n\n// ----- helpers ----- //\n\n// how many milliseconds are in each unit\nvar msUnits = {\n  ms: 1,\n  s: 1000\n};\n\n// munge time-like parameter into millisecond number\n// '0.4s' -> 40\nfunction getMilliseconds( time ) {\n  if ( typeof time == 'number' ) {\n    return time;\n  }\n  var matches = time.match( /(^\\d*\\.?\\d*)(\\w*)/ );\n  var num = matches && matches[1];\n  var unit = matches && matches[2];\n  if ( !num.length ) {\n    return 0;\n  }\n  num = parseFloat( num );\n  var mult = msUnits[ unit ] || 1;\n  return num * mult;\n}\n\n// ----- fin ----- //\n\n// back in global\nOutlayer.Item = Item;\n\nreturn Outlayer;\n\n}));\n\n},{\"./item\":9,\"ev-emitter\":10,\"fizzy-ui-utils\":4,\"get-size\":5}],12:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nvar _jquery = _interopRequireDefault((typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null));\nrequire(\"lazysizes\");\nrequire(\"./navigation\");\nvar _randomizeOrder = require(\"./randomizeOrder\");\nvar _masonry = require(\"./masonry\");\nvar _projectInteractions = require(\"./projectInteractions\");\nvar _peopleInteractions = require(\"./peopleInteractions\");\nvar _poeticInteraction = require(\"./poetic-interaction\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n// import \"./randomizePosition\";\n\n(0, _jquery[\"default\"])(document).on(\"ready\", function () {\n  // for project grid\n  var projectGrid = \".project-grid\";\n  var projectItem = \".project-grid__item\";\n  var projectSizer = \".project-grid__item--small\";\n  var projectSpacer = \".project-grid__spacer\";\n  if (projectItem) {\n    // randomize order\n    // randomize($(projectItem));\n    // apply masonry\n    (0, _masonry.setupMasonry)(projectGrid, projectItem, projectSizer, projectSpacer);\n  }\n\n  // for teaching grid\n  var opportunityGrid = \".opportunities\";\n  var opportunityItem = \".opportunity\";\n  var opportunitySpacer = \".opportunity__spacer\";\n  if (opportunityItem) {\n    // apply masonry\n    (0, _masonry.setupMasonry)(opportunityGrid, opportunityItem, opportunityItem, opportunitySpacer);\n  }\n\n  // for people grid\n  var personGrid = \".people\";\n  var personItem = \".person\";\n  var personSizer = \".person--small\";\n  var personSpacer = \".person__spacer\";\n  var peopleMasonry;\n  if (personItem) {\n    // apply masonry\n    peopleMasonry = (0, _masonry.setupMasonry)(personGrid, personItem, personSizer, personSpacer);\n  }\n\n  // initialize tabs\n  // if the url has a hash\n  if (window.location.hash) {\n    // get the hash value\n    var hash = window.location.hash.replace(\"#\", \"\");\n    // get the related button\n    var buttonToActivate = (0, _jquery[\"default\"])(\".project__deliverable-button[data-hash-target='\" + hash + \"']\");\n    // trigger a click on the button\n    buttonToActivate.trigger(\"click\");\n  }\n\n  // trigger tabs on button click\n  var deliverableButtons = \".project__deliverable-button\";\n  var deliverableContent = \".project__deliverable-content\";\n  if (deliverableButtons) {\n    (0, _projectInteractions.setupTabs)(deliverableButtons, deliverableContent);\n  }\n  var person = (0, _jquery[\"default\"])(\".person__show\");\n  if (person) {\n    (0, _peopleInteractions.toggleBios)(person, peopleMasonry);\n  }\n  if ((0, _jquery[\"default\"])(\".glide\")) {\n    (0, _projectInteractions.setupSliders)();\n  }\n});\n(0, _jquery[\"default\"])(window).on(\"load\", function () {\n  if ((0, _jquery[\"default\"])(\".poetic__highlight\")) {\n    (0, _poeticInteraction.hoverImage)(\".poetic__highlight\");\n  }\n});\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./masonry\":13,\"./navigation\":14,\"./peopleInteractions\":15,\"./poetic-interaction\":16,\"./projectInteractions\":17,\"./randomizeOrder\":18,\"lazysizes\":7}],13:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupMasonry = setupMasonry;\nvar _jquery = _interopRequireDefault((typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null));\nvar _masonryLayout = _interopRequireDefault(require(\"masonry-layout\"));\nvar _imagesloaded = _interopRequireDefault(require(\"imagesloaded\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction setupMasonry(container, item, sizer, spacer) {\n  if ((0, _jquery[\"default\"])(container).length) {\n    var newMasonry = new _masonryLayout[\"default\"](container, {\n      itemSelector: item,\n      columnWidth: sizer,\n      gutter: spacer,\n      percentPosition: true,\n      transitionDuration: 0,\n      initLayout: true\n    });\n    (0, _imagesloaded[\"default\"])(container).on(\"progress\", function () {\n      newMasonry.layout();\n    });\n  }\n  return newMasonry;\n}\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"imagesloaded\":6,\"masonry-layout\":8}],14:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nvar _jquery = _interopRequireDefault((typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar menuOpen = (0, _jquery[\"default\"])(\"#header__hamburger--open\");\nvar menuClose = (0, _jquery[\"default\"])(\"#header__hamburger--close\");\nvar menu = (0, _jquery[\"default\"])(\".header__secondary\");\nvar menuLogo = (0, _jquery[\"default\"])(\".header__logo\");\nvar pageTitle = (0, _jquery[\"default\"])(\".header__page-title\");\nvar showClass = \"show\";\nfunction openMenu() {\n  menuOpen.attr(\"aria-expanded\", \"true\");\n  menuOpen.removeClass(showClass);\n  pageTitle.removeClass(showClass);\n  menuClose.addClass(showClass);\n  menuLogo.addClass(showClass);\n  menu.addClass(showClass);\n}\nfunction closeMenu() {\n  menuOpen.attr(\"aria-expanded\", \"false\");\n  menuOpen.addClass(showClass);\n  pageTitle.addClass(showClass);\n  menuClose.removeClass(showClass);\n  menuLogo.removeClass(showClass);\n  menu.removeClass(showClass);\n}\nmenuOpen.on(\"click\", function () {\n  openMenu();\n});\nmenuClose.on(\"click\", function () {\n  closeMenu();\n});\n(0, _jquery[\"default\"])(document).on(\"keyup\", function (e) {\n  if (e.key == \"Escape\") {\n    closeMenu();\n    addClass;\n  }\n});\n(0, _jquery[\"default\"])(document).on(\"load\", function () {\n  closeMenu();\n});\n(0, _jquery[\"default\"])(window).on(\"load\", function () {\n  closeMenu();\n});\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleBios = toggleBios;\nvar _jquery = _interopRequireDefault((typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null));\nvar _masonryLayout = _interopRequireDefault(require(\"masonry-layout\"));\nvar _imagesloaded = _interopRequireDefault(require(\"imagesloaded\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction toggleBios(person, masonryObject) {\n  person.on(\"click\", function () {\n    (0, _jquery[\"default\"])(this).toggleClass(\"person__show--open\");\n    (0, _jquery[\"default\"])(this).siblings(\".person__secondary-information\").toggleClass(\"person__secondary-information--open\");\n    masonryObject.layout();\n  });\n}\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"imagesloaded\":6,\"masonry-layout\":8}],16:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hoverImage = hoverImage;\nvar _jquery = _interopRequireDefault((typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction hoverImage(selector) {\n  var dataImage;\n  var backgroundImage;\n  var dataOpacity;\n  var imageOpacity;\n  (0, _jquery[\"default\"])(selector).on(\"mouseenter\", function () {\n    dataImage = (0, _jquery[\"default\"])(this).data(\"image-id\");\n    backgroundImage = (0, _jquery[\"default\"])(\"#\" + dataImage);\n    dataOpacity = (0, _jquery[\"default\"])(this).data(\"opacity\");\n    imageOpacity = parseFloat((0, _jquery[\"default\"])(this).data(\"opacity\")) / 100;\n    backgroundImage.css({\n      opacity: imageOpacity\n    });\n  }).on(\"mouseleave\", function () {\n    backgroundImage.css({\n      opacity: 0\n    });\n  });\n}\n\n// import tippy from \"tippy.js\";\n\n// tippy(\".poetic__highlight\", {\n// \tcontent(reference) {\n// \t\tconst id = reference.getAttribute(\"data-template\");\n// \t\tconst template = document.getElementById(id);\n// \t\treturn template;\n// \t},\n// \tpopperOptions: {\n// \t\tmodifiers: [\n// \t\t\t{\n// \t\t\t\tname: \"flip\",\n// \t\t\t\tenabled: false,\n// \t\t\t},\n// \t\t],\n// \t},\n// \t// trigger: \"click\",\n// \tallowHTML: true,\n// \tplacement: \"left\",\n// \t// set the offset to the center of the word\n// \toffset: ({ placement, reference, popper }) => {\n// \t\treturn [0, (reference.width + 350) / -2];\n// \t},\n// \tmaxWidth: 350,\n// \tduration: 200,\n// \tarrow: false,\n// \tanimation: \"scale\",\n// \tzIndex: -999,\n// });\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],17:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupSliders = setupSliders;\nexports.setupTabs = setupTabs;\nvar _jquery = _interopRequireDefault((typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null));\nvar _imagesloaded = _interopRequireDefault(require(\"imagesloaded\"));\nvar _glide = _interopRequireDefault(require(\"@glidejs/glide\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n// import \"slick-carousel/slick/slick\";\n\nvar glideArray = [];\nvar glideMax;\nvar mobilePerview;\nvar tabletPerview;\nfunction setupSliders() {\n  glideMax = (0, _jquery[\"default\"])(\".glide\").length;\n  for (var i = 1; i < glideMax + 1; i++) {\n    var sliders = document.querySelectorAll(\".glide\");\n    var glide = document.getElementById(\"glide--\" + i);\n    var perView = glide.dataset.perView;\n    if (perView > 1) {\n      mobilePerview = 1;\n      tabletPerview = 2;\n    } else {\n      mobilePerview = 1;\n      tabletPerview = 1;\n    }\n    glideArray[i] = new _glide[\"default\"](glide, {\n      type: \"carousel\",\n      gap: 60,\n      autoplay: false,\n      animationDuration: 500,\n      hoverpause: true,\n      perView: perView,\n      breakpoints: {\n        768: {\n          perView: tabletPerview\n        },\n        512: {\n          perView: mobilePerview\n        }\n      }\n    }).mount();\n  }\n}\nfunction setupTabs(buttons, content) {\n  // get all tab buttons\n  var tabButtons = (0, _jquery[\"default\"])(buttons);\n  // get all tab content\n  var tabContent = (0, _jquery[\"default\"])(content);\n  // on clicking a button\n  tabButtons.on(\"click\", function () {\n    // make record of the button\n    var tabButton = (0, _jquery[\"default\"])(this);\n    // get the data attribute\n    var tabButtonData = (0, _jquery[\"default\"])(this).attr(\"data-for-tab\");\n    // for each tab content\n    tabContent.each(function (index) {\n      // make record of the content item\n      var tabContent = (0, _jquery[\"default\"])(this);\n      // get the data attribute\n      var tabContentData = (0, _jquery[\"default\"])(this).attr(\"data-tab\");\n      // if the content data attribute matches the tab attribute\n      if (tabContentData == tabButtonData) {\n        // add active class to the button\n        tabButton.addClass(\"active\");\n        // remove active class to the button\n        tabButton.siblings().removeClass(\"active\");\n        // add active class to the content item\n        tabContent.addClass(\"active\");\n        // remove active class to the content item\n        tabContent.siblings().removeClass(\"active\");\n      }\n    });\n    glideArray[tabButtonData].update();\n    // $(\".project__carousel--\" + tabButtonData).update();\n  });\n}\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"@glidejs/glide\":1,\"imagesloaded\":6}],18:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomize = randomize;\nvar _jquery = _interopRequireDefault((typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction randomize(selector) {\n  // if the item exists\n  if (selector) {\n    // find the parent\n    selector.parent().each(function () {\n      // for each parent\n      (0, _jquery[\"default\"])(this)\n      // find the children\n      .children(selector)\n      // get a random sort order\n      .sort(function () {\n        return Math.random() - 0.5;\n      })\n      // remove the children from the parent\n      .detach()\n      // append the children with the new order\n      .appendTo(this);\n    });\n  }\n  return this;\n}\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}]},{},[12]);\n"],"file":"build.js"}